//A crappy little program written with much help from Rich.  
//Makes a gif using idlrpc.
//You can easily customize the result of this program 
//by playing with dods_gif.pro.
//The current dods_gif.pro is quite problematic, and just 
//begging to be rewritten by someone who actually knows 
//how to program.  Just remember that you need to restart 
//idlrpc in order for your changes to take effect.

//To get this program to compile on fwiffo use the following line:

//g++ idlgif.cpp -o idlgif -lidl_rpc -I/usr/local/rsi/idl/external/rpc -L/usr/local/rsi/idl/bin/bin.linux -w


//If you want to run this program you will need to set LD_LIBRARY_PATH 

//setenv LD_LIBRARY_PATH "/usr/local/rsi/idl/bin/bin.linux"

#include<stdio.h>
#include<string>
#include<iostream>

#include "idl_rpc.h"

CLIENT *idlClient;

string dodstype;

/*
  These first three functions just concern themselves with converting 
  from strings to integers and back again.  
*/
int raise(int n) {
  int rval=1;
  for(int i=0; i<n-1;i++) rval*=10;
  return rval;
}

int make_int(string num) {
  char *cnum = (char *)num.c_str();
  int mag= strlen(cnum);
  int rval=0;
  for(int i=0;i<mag;i++) rval+=raise(mag-i)*(cnum[i]-'0');
  return rval;
}

string make_str(int n) {
  char *foo = new char[n/10+1];
  sprintf(foo,"%d",n);
  return foo;
}

/*
  This function makes a get_dods call and puts the resulting array 
  into the IDL variable specified in name.  Note that the function is
  smart enough to handle 2, 3 and 4 dimensional cases.  

  The perl code that calls this program is generalized to do 2+ 
  dimensions, and it should be quite straight forward to generalize.
*/

void get_dods(string name, string url, string variable, 
	      string xlo, string xhi, 
	      string ylo, string yhi, 
	      string third, string forth) {

  if(!(forth=="")) 
    IDL_RPCExecuteStr(idlClient,
		      (char *)("stat = GET_DODS('"+url+"',CE='"+variable+"."
			       +variable+"["+forth+"]["+third+"]["
			       +ylo+":"+yhi+"]["
			       +xlo+":"+xhi+"]',data)").c_str());
  else if(!(third=="")) {
    //printf(("stat = GET_DODS('"+url+"',CE='"+variable+"."+variable+"["+third+"]"
    //+"["+ylo+":"+yhi+"]["+xlo+":"+xhi+"]',data)\n").c_str());
    
    IDL_RPCExecuteStr(idlClient,
		      (char *)("stat = GET_DODS('"+url+"',CE='"+variable+"."
			       +variable+"["+third+"]["
			       +ylo+":"+yhi+"]["
			       +xlo+":"+xhi+"]',data)").c_str());
  }
  else {
    //printf(("stat = GET_DODS('"+url+"?"+variable
    //+"["+ylo+":"+yhi+"]["+xlo+":"+xhi+"]',data)\n").c_str());

    //IDL_RPCExecuteStr(idlClient,
    //(char *)("stat = GET_DODS('"+url+"?"+variable+"["
    //+ylo+":"+yhi+"]["+xlo+":"+xhi+"]',data)").c_str());

    if(dodstype=="not_grid") 
      IDL_RPCExecuteStr(idlClient,
			(char *)("stat = GET_DODS('"+url+"?"+variable+"["
				 +ylo+":"+yhi+"]["
				 +xlo+":"+xhi+"]',data)").c_str());

    else 
      IDL_RPCExecuteStr(idlClient,
			(char *)("stat = GET_DODS('"+url+"',CE='"+variable+"."
				 +variable+"["
				 +ylo+":"+yhi+"]["
				 +xlo+":"+xhi+"]',data)").c_str());
  }

  IDL_RPCExecuteStr(idlClient,(char *)(name+"=data."+variable+"."+variable).c_str());	

}



main(int argc, char *args[]) {
      string url = args[1];
      string variable = args[2];
      string xlo =args[3];
      string xhi =args[4];
      string ylo =args[5];
      string yhi =args[6];
      string lonlow = args[7];
      string lonhigh = args[8];
      string latlow = args[9];
      string lathigh = args[10];
      string xsize = args[11];
      string output = args[12];
      string orientation = args[13];
      string FillValue= args[14];
      dodstype=args[15];
      string landmask=args[16];
      string script = args[17];
      string client_dir=args[18];
      string third, forth;
      if(args[19]) {
      	third = args[19];
      	if(args[20]) forth = args[20];
      	else forth = "";
      }
      else third = "";

      idlClient = IDL_RPCInit(0, 0);
      //printf(("cd, '"+client_dir+"'").c_str());

      IDL_RPCExecuteStr(idlClient,(char *)("cd, '"+client_dir+"'").c_str());

      //This if-else deals with the problems that come 
      //from requests that include the seam of the dataset.

      if(make_int(xhi) > make_int(xsize)) {
      	get_dods("b", url, variable, xlo, 
		 make_str(make_int(xsize)-1), ylo, yhi, third, forth);
      	get_dods("c", url, variable, "0", 
		 make_str(make_int(xhi)-make_int(xsize)), ylo, yhi, third, forth);
      	IDL_RPCExecuteStr(idlClient,"a = [b,c]");
                                        	 	
      }
      else 
	get_dods("a", url, variable, xlo, xhi, ylo, yhi, third, forth);

      if(landmask!="none") 
	get_dods("mask", landmask, variable, 
		 xlo, xhi, ylo, yhi, third, forth);

      else IDL_RPCExecuteStr(idlClient,"mask=0");

      IDL_RPCExecuteStr(idlClient,"cd, '/home/httpd/html/DODSview'");

      IDL_RPCExecuteStr(idlClient,
			(char *)("print, 'dods_gif, a, "
				 +output+orientation+", "
				 +FillValue+"'").c_str());

      IDL_RPCExecuteStr(idlClient,
			(char *)(script+", a, '"+output+"', "
				 +lonlow+", "+lonhigh+", "
				 +latlow+", "+lathigh+", '"
				 +orientation+"', "+FillValue + ",mask").c_str());

      IDL_RPCExecuteStr(idlClient,"delvar,foo,sst2,a,data");

      IDL_RPCExecuteStr(idlClient,"exit");

      IDL_RPCCleanup(idlClient, FALSE);
}




