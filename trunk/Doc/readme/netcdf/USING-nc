
$Id$

This is a breif `how-to' guide for users who don't want to read the more
detailed user's guide. The User's Guide is online at
http://dods.gso.uri.edu/DODS/home/users.html (a postscript file is also
available for those that want to print out a copy). 

RELINKING USER SOFTWARE

To re-link an existing program with the DODS implementation of netCDF, you do
just that. Find the directory that contains the source code modify the
Makefile for the program so that in place of the netCDF library the DODS
library is used. Because DODS is implemented as a core set of classes which
are specialized for each API we (or someone else) wants to re-implement the
program must be re-linked with several libraries. These libraries are:

	libdap++.a:	 The core software
	libnc-dods.a:	 The software special to the netCDF implementation

Also used by DODS are the World Wide Web library from the Web Consortium, Tcl
from Sun Labs and Expect from NIST. These libraries are all freely available
(you can get either source of binary versions from our ftp site or the
`official' site - see http://dods.gso.uri.edu/DODS/home/software.html). The
World Wide Web library is required by DODS while the Tcl and Expect libraries
are not.

Look in the Makefile in this directory to see how we re-linked the netCDF
programs `ncdump' and `ncview'. When using g++ a program can be re-linked
without explicitly including libg++.a on the command line:

	-lnc-dods -ldap++ -lnc-dods -ldap++ -lwww -lexpect -ltcl 

Note that -lnc-dods and -ldap++ appear twice. This is due to a circular
dependence between to two libraries. Also note the order in which each
library is listed.

If you wanted to re-link using gcc instead `-lg++' must be added after the
DODS libraries. E.G.:

	-lnc-dods -ldap++ -lnc-dods -ldap++ -lwww -lexpect -ltcl -lg++

Once re-linked, the program will work exactly as before when run using local
files. However, users can also give URLs to specify data files. In this case
the machine name part of the URL must reference a machine which has data
accessible via a DODS data server (see SETTING UP A DATA SERVER). Suppose
that a friend has told you about a data file named `buoys.nc' in a directory
called `exp1' on a machine named oceans.univ.edu. To look at this data invoke
ncdump using the URL for this data in place of a simple filename. E.G.:

       ncdump http://dods.gso.uri.edu/cgi-bin/nph-nc/data/fnoc3.nc

       ^^^^^^        ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^ ^^^^ ^^^^^^^^ 
       Program	     Machine name     Server         Dir  File     
	      
And to look at the first 10 elements of an array vairable named `u' in this
data file, you can use a constraint as a URL parameter. E.G.:

       ncdump http://dods.gso.uri.edu/cgi-bin/nph-nc/data/fnoc3.nc?u[0:9]

       ^^^^^^        ^^^^^^^^^^^^^^^^ ^^^^^^^^^^^^^^ ^^^^ ^^^^^^^^ ^^^^^^
       Program	     Machine name     Server         Dir  File     Constraint
	      
Note that the URL to data/fnoc3.nc is accessed via the data server which is
an http CGI module. You need to tell the http daemon to run the DODS data
server and read from the named file (in this case data/fnoc3.nc). That is why
the `cgi-bin/nph-nc' part is in the URL.

SETTING UP A DATA SERVER

Note: this discussion assumes that the NCSA World Wide Web server (httpd) is
installed on the workstation which is to be used to serve data. You do not
need to use this particular web server, any server that supports CGI 1.1
(Netscape, Apache, CERN, ...) will work. If you not have a web server
installed, first install one and then continue installing the DODS server.
For information on various servers, see: 

NCSA		http://hoohoo.ncsa.uiuc.edu/
Apache		http://www.apache.org/
CERN/W3C	http://www.w3c.org/

To set up a DODS data server using the netCDF server implementation, first
follow the instructions in the INSTALL document. Four programs comprise the
data server: a CGI (nph-nc) which is used to dispatch each data request to the
correct filter program and three filter programs (nc_das, nc_dds,
nc_dods). Make sure that the CGI module `nph-nc' is somewhere where the http
server can run CGI modules. 

Data that are to be served by the DODS server must either be within the http
server's document root directory or they must be in files/directories that
are linked to files/directories within the document root directory. To find
out which directory is the http server's document root, look in the httpd
configuration file srm.conf.

For example, to make the file test.nc available to users it must be either
placed or linked within the document root directory. On my workstation
the document root directory is /usr/local/spool/http so the file must be
moved or copied to that directory or one of its subdirectories or I must
create a symbolic link in that directory or one of its subdirectories to the
file. I have created a directory `data' in the http server's document root
directory and copied the file test.nc there. The URL to that data file is:

	  http://dods.gso.uri.edu/cgi-bin/nph-nc/data/test.nc

Note that after the machine name (dods.gso.uri.edu) the URL contains the path
to the DODS data server CGI and that the path to the data (relative to the
document root directory) *follows* the CGI name.

Also note that to limit access to the server to a specific set of machines,
place the CGI within the document root directory (this works for NCSA version
1.5 and later and also for Apache 1.1.1 and later). See the file SECURITY for
a detailed description of the types of security DODS provides for data and
how to install servers to take advantage of those features.
