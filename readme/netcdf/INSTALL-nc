
$Id$

Note: This directory contains two sample programs (ncdump and ncview) which
are relinked with the DODS libraries. These two applications are
automatically built after the nc-dods surroagte library is built (follow the
the steps outlined in `To Build the nc-dods software' below).

Note: If you are installing this server on a Linux system, read the note for
Linux systems further down in this file!

**Important** Since ncview is an X11 application, you may need to perform some
additional steps to get that program to build/install correctly. If the
Makefile generated by the configure script fails for some reason, then change
to the ncview directory (it is within the directory containing this file) and
proceed as you would when building any other X11 application. The Standard
Imakefile has been modified so that the DODS libraries will be used when the
program is compiled and linked.

Both of the sample programs will be installed in the DODS bin directory
(that is $DODS_ROOT/bin) and they will be called `dncdump' and `dncview' so
that you can easily distinguish the DODS versions from the regular versions.

To Build the nc-dods software:

1) Type `./configure' at the system prompt. On some systems you may have to
type `sh configure'.

1.1) We now include the mexcdf matlab interface software. In order to build
     that client the configure script needs to find Matlab on your computer.
     However, the mexcdf software is not an essential part of the DODS-NetCDF
     software. To get have the mexcdf package built give --enable-matlab to
     configure. 11/2/98 jhrg

2) Type `make' to build the new library and the three server programs, `make
check' to build the test software. NB: you must have the GNU automated
testing software DejaGNU to run the makefile's check target.

3) Type `make install' to install the new library. 

4) To install the data server you need to copy the four executables (one
script and three binary programs) named `nc', `nc_das', `nc_dds' and
`nc_dods' to your http server's CGI directory. For many UNIX computers, this
will be named cgi-bin and will reside within the http server's home
directory (e.g., on my system the cgi binary directory is called
/usr/local/etc/httpd/cgi-bin). You can find out the name of this directory if
you don't know it by looking in the http server's srm.conf configuration file
(which will be located in a directory called `conf' within the http server's
home directory. 

To install a secure server - one that only specific machines or users can
access, see the file SECURITY.

-----------------------------------------------------------------------------

NOTE FOR LINUX

The linux shell gags on the syntax we use in the Perl scripts to locate the
perl interpreter on your system. Look at the nph-jg script. The top two lines
look like:

    #!/bin/sh -- # -*- perl -*-
    eval "exec perl -T -S $0 $*" if 0;	# Trick to find perl. Must be on PATH.

On Linux you should replace these lines with:

    #!/path/to/your/perl -T

Where /path/to/your/perl is the full pathname of the perl interpreter you
want the servers to use. You can find the path to perl on your computer by
typing:

    which perl

You can check the version of perl by typing:

    perl -v

You need Perl version 5.001 or greater.

------------------------------------------------------------------------------Notes:

1) To build with program instrumentation use `--enable-debug=<level>' where
<level> is 1 or 2. 

2) To build with memory leak checks use --enable-dbnew. You must have the
freely available libraries libdbnew.a and libefence.a to make use of this
option. 

The defaults for both debug and dbnew are to *not* include those
features. Thus, if you want to built a straight version of the libraries (and
test code), use `./configure'. If you want the extra features, use
`./configure --enable-dbnew --enable-debug=2'

Debugging aids in DODS source code:

debug: simple program instrumentation -- see the file debug.h in
$(DODS_ROOT)/include for more information

debug2: more elaborate program instrumentation -- by convention this is used
for output that is half a page or more, while DEBUG is used for single line
output.

dbnew: include -ldbnew and -lefence when linking. libdbnew.a contains
overloaded versions of new, new[] delete and delete[]. It also contains code
to `walk the malloc chain' and simple checks for out-of-bounds errors.

efence: a freely available bounds checker for dynamically allocated
memory. When used with dbnew, efence must be set to 8-byte alignment.
