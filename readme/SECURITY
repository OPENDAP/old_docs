
 $Id$

About data security.

There are two levels of security which DODS data servers support: domain
restrictions and user restrictions. In conjunction with a World Wide Web
server, access to a DODS server can be limited to a specific group of users
(authenticated by password), specific machine(s) or a group of machines
within a given domain or domains. 

Note that one host machine may have several DODS servers, each with different
access restrictions. It is straightforward to configure the servers so that
only authorized users/machines will access a given dataset.

Also note that per-user access limitation may confuse or annoy users since
each data access request will require authorization. 

The security features rely almost entirely on the host machine's WWW server
so the steps required to install a secure DODS server will vary depending on
the WWW used. Thus, before installing a secure DODS server, check over your
WWW server documentation to make sure it provides the following security
features: access limits to files in the document root on a per user and/or
per machine basis and the ability to place CGI scripts within the document
root directory. As an alternative to the last requirement, a server may
provide a way to place access limits on a CGI script not within the document
root directory hierarchy.

IMPORTANT

Because security features are used to protect sensitive or otherwise
important information, once set-up they should be tested until you are
comfortable that they work. You should try accessing from at least one
machine that is not allowed to access your data. If you would like, we will
try to access your data, assuming that our machines are not among those
allowed, to help you test your set-up. Note that this is to test your
particular security configuration, not the overall security system used by a
particular WWW server.

Since the security features are provided by the WWW servers, it is highly
likely that they are functional and extensively tested because these servers
are used by hundreds of thousands of people each day. While problems with
these features have shown up in the past (e.g., the Netscape SSL server bug)
they are generally fixed quickly. Thus there is good reason to assume that
your data is safe if you choose to set-up your DODS server as a secure one.
However, *there is a chance* that the a defect in the WWW server software
will allow unauthorized people access; how big that chance is depends on the
WWW server software you use and how extensively its security features are
tested. That level of testing is completely beyond our control.

EXAMPLE 

In the following I'll use the NCSA 1.5.2a server and an example and describe
how to install a server which limits access to a set of machines. While this
example is limited to the NCSA 1.5.2a server, it should be simple to perform
the equivalent steps for any other WWW server that supports the set of
required security features.

I. Create a separate directory.

To limit access to a  dataset to particular machine, begin be creating a
special directory within the Document Root directory hierarchy. 

    cd /usr/local/spool/http
    mkdir secure

Go to that directory.

    cd secure

II. Establish access limitations for that directory.

Establish the access limitations on this directory that you desire. For the
NCSA 1.5.2a server, this is done either by adding lines to the server's
access.conf file or by using a per-directory file. Note: The use of
per-directory access limit files is a configurable feature of the NCSA 1.5.2a
server; look in the server's srm.conf file for the value of the AccessFile
resource.

I chose to use the per-directory access limit files. The file, named
`.htaccess' contains the following lines:

    %more .htaccess

    Options ExecCGI Indexes FollowSymLinks

    <Limit GET>
    order deny,allow
    deny from all
    allow from dods.gso.uri.edu
    </Limit>

This file limits access to this directory and all those beneath it to the
machine `dods.gso.uri.edu'. Domain limitations are also possible (e.g.,
`gso.uri.edu') as are multiple domain and/or machine limitations. To force
users to supply a username/password pair before accessing data, change the
limitations file to:

    AuthUserFile /usr/local/etc/httpd/conf/.htpasswd

    Options ExecCGI Indexes FollowSymLinks

    <Limit GET>
    order deny,allow
    deny from all
    require valid_user
    </Limit>

Note that I added the AuthUserFile option and the line `require valid_user'.


III. Copy the server into the new directory.

Copy the CGI dispatch program and the server filter programs in to the newly
created directory. For example, I wanted to install a secure version of the
netCDF server so I copied the script `nph-nc' along with the filter programs
nc_das, nc_dds, nc_dods and nc_usage (nc_usage is optional). 

IV. Configure the CGI script so it can be executed by the WWW server

You must make sure that the CGI script can be executed by the WWW server -
this means more than checking to see that the script is executable! First
look in httpd's srm.conf file for the resource `AddType'. While appears just
below the `ScriptAlias' resource in the copy of the srm.conf file distributed
with the server, it is commented out. Make sure that the line

    AddType application/x-httpd-cgi .pl

is not commented out. This will allow httpd to recognize things that end in
`.pl' as executable even if they appear in the document root directory (NB:
this feature was present in NCSA's httpd since version 1.2, but did not work
correctly until version 1.5). 

Finally, rename the script from `nph-nc' to `nph-nc.pl'.

V. Example accesses

For the configuration outlined here, the URL looks like:

    http://dods.gso.uri.edu/secure/nph-nc.pl/data/fnoc1.nc

You can use this URL with all the regular DODS clients but it will only allow
users from dods.gso.uri.edu to access the data file. All other machines will
receive a `Forbidden' message from httpd.

VI. Tips.

Here are some tips on setting up secure servers.

Using the per-directory limit files makes changing limits easier since the
server reads those every time it accesses the directory, while changes made
to the access.conf file are not read until the server is restarted or sent
the HUP signal. If you plan on adjusting the security limits (e.g., adding
hosts frequently) the per-directory files are best since it is easy to forget
to restart the www server. However, because these files are read for each
access to any file in the directory tree where they reside, there is
potentially a performance hit associated with their use. A good rule of thumb
is to keep the secure directory tree shallow and switch to the access.conf
file when the set-up stabilizes.

I have noticed that the access.conf/.htaccess files are fairly sensitive to
syntax errors. For example, if you mistakenly leave a leading period on a
domain name then the WWW server will not allow hosts from that domain.
Similarly, lists of machines and/or domains are separated by white space, not
commas. Here are some examples of good and bad `allow' lines

    Good:	allow gso.uri.edu dcz.cvo.oneworld.com
    Bad:	allow .gso.uri.edu dcz.cvo.oneworld.com
		      ^
		      No leading period
    Bad:	allow gso.uri.edu, dcz.cvo.oneworld.com
				 ^
				 Commas break the WWW server

You can have multiple `allow' lines in the access limits files. This can help
in organizing your configuration which in turn will produce a more robust
set-up. 
