% \iffalse
%
%  Improved tools for DODS Documentation.
%
%  $Id$
%
%  $Log: dods-book2.dtx,v $
%  Revision 1.11  2004/12/09 21:09:43  tomfool
%  fixed oops in \titlepanel
%
%  Revision 1.10  2004/12/09 18:47:42  tomfool
%  updated to a slightly more sober look
%
%  Revision 1.9  2004/06/29 17:14:05  jimg
%  Moved CSS to /resources/.
%
%  Revision 1.8  2004/04/24 21:37:22  jimg
%  I added every directory in preparation for adding everyting. This is
%  part of getting the opendap web pages going...
%
%  Revision 1.7  2004/04/19 00:45:35  tom
%  hyperlatex changes
%
%  Revision 1.6  2004/04/19 00:23:07  tom
%  removed hyperlatex kluge
%
%  Revision 1.5  2004/04/14 21:58:49  jimg
%  Hack for an error in \titlepanel.
%
%  Revision 1.4  2003/01/04 00:00:28  tom
%  fixed to encourage sections to start at other than the top of the page
%
%  Revision 1.3  2002/07/15 17:49:31  tom
%  removed \DODSDoc from these files.  Don't know what it was doing there
%  in the first place.  Moved it to boiler/dods-def.tex
%
%  Revision 1.2  2000/10/30 20:09:31  tom
%  corrected \xlinkn error.
%
%  Revision 1.1  2000/10/12 18:13:05  tom
%  added to repository
%
%
% \fi

% \MakeShortVerb\|
%
%
% \DoNotIndex{\@@par,\@M,\@afterindenttrue,\@dotsep,\@dottedtocline}
% \DoNotIndex{\@plus,\@pnumwidth,\relax,\rulewidth,\setlength,\\}
% \DoNotIndex{\@restonecolfalse,\@restonecoltrue,\@svsechd,\@tempdima}
% \DoNotIndex{\@tempskipa,\@tocrmarg,\@xsect,\addtolength,\advance,\ }
% \DoNotIndex{\begin,\begingroup,\bf,\bfseries,\bgroup,\c@secnumdepth}
% \DoNotIndex{\c@tocdepth,\def,\egroup,\else,\em,\end,\endgroup,\ensuremath}
% \DoNotIndex{\fi,\hb@xt@,\hbox,\hfil,\hfill,\hrule,\hskip,\hss,\ht}
% \DoNotIndex{\if@mainmatter,\if@restonecol,\if@twocolumn,\ifdim,\ifnum}
% \DoNotIndex{\ifodd,\ifthenelse,\interlinepenalty,\kern,\leavevmode}
% \DoNotIndex{\m@ne,\m@th,\mkern,\newcommand,\newcounter,\newlength}
% \DoNotIndex{\newpage,\nobreak,\noindent,\normalcolor,\normalsize}
% \DoNotIndex{\onecolumn,\p@,\parfillskip,\penalty,\renewcommand}
% \DoNotIndex{\renewenvironment,\rule,\ruledist,\strut,\textbf,\textheight}
% \DoNotIndex{\sffamily,\@minus,\@mkboth,\arabic,\EmptyP,\index}
% \DoNotIndex{\setcounter}
% \DoNotIndex{\textsc,\textsf,\the,\tt,\twocolumn,\unhbox,\vbox,\vfil}
% \DoNotIndex{\vfilneg,\vskip,\vspace,\wd,\z@,\DoNotIndex}
%
% \iffalse
%<*driver>
\documentclass{ltxdoc}

\EnableCrossrefs         
 %\DisableCrossrefs % Say \DisableCrossrefs if index is ready
\CodelineIndex
\RecordChanges                  % Gather update information
 %\OnlyDescription  % comment out for implementation details
 %\OldMakeindex     % use if your MakeIndex is pre-v2.9
\setlength\hfuzz{15pt}  % dont make so many
\hbadness=7000          % over and under full box warnings
\begin{document}
   \DocInput{dods-book2.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{dods-book2.cls}
% \title{Tools for DODS Documentation}
% \author{Tom Sgouros}
% \maketitle
%
% \begin{abstract}
%    This is a collection of tools and templates for generating
%    postscript and html versions of DODS documentation.
% \end{abstract}
%
% \changes{1.0}{99/02/04}{Created}
%
%
% \newcommand{\hlx}{Hyperlatex}
% \newcommand{\latex}{\LaTeX}
% \newcommand{\bck}{$\backslash$}
%
% {\parskip 0pt \tableofcontents }
%
% \section{Introduction}
%    This file contains a collection of \latex\ macros and \hlx\ 
%    definitions and assorted instructions for their use.  The whole
%    is designed to enforce a set of fairly sturdy document templates
%    for DODS documentation.  Documentation written with these
%    templates can be easily transformed into either PostScript or
%    HTML output.
%
%    (To be done:  Include PDF output.)\index{PDF}
%
%    The framework for these templates was lifted from the \latex\
%    book class, and many of those definitions survive intact.
%
%    These are the files defined here.
%
%    \begin{description}
%      \item[dods-book2.cls] The definition of the \latex\ dods-book2
%        class.  This should appear in the search path for these things:
%        \$TEXINPUTS.  The directory \$DODS\_ROOT/doc/latex is usually
%        on the search path.
%      \item[dods-book2.hlx] These are \hlx\ definitions that match the
%        \latex\ definitions in the .cls file.  \hlx\ reads this file
%        when it parses an input file with |\documentclass{dods-book2}|.
%        This and other |.hlx| files must be put in the \hlx\ class
%        directory.
%      \item[dods-index.ist] The definition of the index style to use
%        in PostScript books.  This file must stay in the
%        \$DODS\_ROOT/doc/latex directory, since that's where the
%        Makefiles look for it.
%    \end{description}
%
%    The files are not described in order.  Rather, the functions are
%    described in order, and the \latex\ and \hlx\ solutions are
%    described under each section.  This may be confusing to read,
%    but it is a better way to maintain things.
%
% \section{Using the Class}
%
%    The only option currently available is `draft', which causes
%    some marginalia to be printed, including the argument of
%    indexing commands, labels, and |\tbd| notations.  You also get a
%    footer with the date and time on it.
%
%\catcode`\<=14
%<+cls>\typeout{DODS Book Class -- Tom Sgouros - 1999}
%<+cls>\NeedsTeXFormat{LaTeX2e}
%    \begin{macrocode}
%<*cls>
\newif\if@dodsdraft\@dodsdraftfalse
\DeclareOption{draft}
   {\@dodsdrafttrue}
%</cls>
%    \end{macrocode}
%<+cls>\DeclareOption*{\PassOptionsToClass{\CurrentOption}{book}}
%<+cls>\ProcessOptions\relax
%<+cls>\LoadClass[11pt]{book}
%<+cls>\RequirePackage{hyperlatex}
%<+cls>\RequirePackage{psfig}
%<+cls>\RequirePackage{makeidx}
%<+cls>\RequirePackage{fancyhdr}
%<+cls>\RequirePackage{vcode}
%<+cls>\RequirePackage{pifont}
%<+cls>\if@dodsdraft\relax\else\RequirePackage{mparhack}\fi
%<+hlx>\usepackage{makeidx}
%<+hlx>\usepackage{emulate}
%<+hlx>\usepackage{vcode}
%\catcode`\<=12
%
% \section{Functional Font Changes}
%
%    These font change commands are used to denote the logical
%    function of the terms or phrases they encircle.  Some of these
%    (like |\emph{}|) are defined by \latex\ and some of them are
%    defined in |hyperlatex.sty|, which is part of this document
%    class. \index{font!functional descriptions}\index{default font}
%
%    \begin{description}
%    \item[{\tt \bck new}] \DescribeMacro{\new} Marks the first
%      occurrence of a term (where it 
%      should be defined.)  An index token will automatically point
%      here, with the index entry in italics.  The term itself is
%      formatted with the |\dfn| macro (whose default
%      definition--italics--is in hyperlatex.sty). 
%    \item[{\tt \bck var}] \DescribeMacro{\var}  Use this for
%      variables.  These will
%      appear in examples, but in places where the user must
%      substitute appropriate text. The default definition is in
%      hyperlatex.sty. 
%    \item[{\tt \bck class}] Use this for class names.
%      \DescribeMacro{\class}
%    \item[{\tt \bck lit}] \DescribeMacro{\lit} This command is for 
%      literal text.
%      Note that it is not a small verbatim environment, because you
%      can't use |\verb| in a macro argument.  That is, underscore and
%      dollar-sign characters still need to be protected.
%    \item[{\tt \bck inp}] \DescribeMacro{\inp} Indicates user typed
%      information. (hyperlatex.sty uses |\kbd|.)
%    \item[{\tt \bck but}] Use this for button names.
%      \DescribeMacro{\but}
%    \item[{\tt \bck pdmenu}] \DescribeMacro{\pdmenu}  Use this 
%      for menu titles (``\textit{p}ull-\textit{d}own
%      \textit{menu}'').  Note
%      that menu titles and buttons often need to be abbreviated.  That
%      is, a selection may be a button in a sub-menu of a menu.  If you
%      have a button for ``background'' in the ``color'' submenu of the
%      ``options'' menu, abbreviate it with
%      |\but{options,color,background}|.  
%    \item[{\tt \bck cit}] Titles of books.
%      \DescribeMacro{\cit}
%    \item[{\tt \bck tblhd}] Use this macro to format the
%      headers of table columns.
%      \DescribeMacro{\tblhd}
%    \end{description}
%
%    \DescribeEnv{vcode}\DescribeEnv{verbatim}\DescribeEnv{example}
%    For example text, use the |vcode| environment if the examples are
%    typed by the computer, and |example| if they are to be typed by a
%    user.  Use |verbatim| only for long examples, since |vcode| can't
%    handle page breaks very well.
%
%    See also the |\listconventions| macro in the |layout.tex| file.
%    That macro makes a table of typographic conventions, which should
%    be part of any book preface.
%
%    \subsection{\latex\ Versions}
%
%    This is how these macros are defined for \latex .
%
%    \begin{macrocode}
%<*cls>
\newcommand{\new}[1]{\dfn{#1}\indc{#1|emph}}
\newcommand{\class}[1]{{\em #1}}
\newcommand{\lit}[1]{{\tt #1}}
\newcommand{\inp}[1]{\texttt{\textit{#1}}}
\newcommand{\but}[1]{\texorhtml{\fbox{\textbf{\footnotesize\textsf{#1}}}}%
                          {\textbf{\textsc{#1}}}}
\newcommand{\pdmenu}[1]{\texorhtml{\textsf{#1}}
                                {\textsc{#1}}}
\newcommand{\tblhd}[1]{\bf #1}
%</cls>
%    \end{macrocode}
%
% \subsection{\hlx\ Versions}
%
%    The functional font default definitions are as follows for \hlx .
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\lit}[1]{\html{CODE class="literal"}{#1}\html{/CODE}}
\newcommand{\inp}[1]{\html{CODE class="input"}{#1}\html{/CODE}}
\newcommand{\new}[1]{\html{I}{#1}\html{/I}\index{#1}}
\newcommand{\class}[1]{\html{I}{#1}\html{/I}}
\newcommand{\but}[1]{\html{U}{#1}\html{/U}}
\newcommand{\pdmenu}[1]{\html{U}\html{B}{#1}\html{/B}\html{/U}}
\newcommand{\tblhd}[1]{\html{B}{#1}\html{/B}}
%</hlx>
%    \end{macrocode}
%
% \subsubsection{Hyperlinks}
%
%    The following is an extension of the \hlx\ hyperlink macro.  This
%    works in precisely the same way as |\xlink|, but the new page
%    appears in a new browser window. \index{hyperlinks}
%    \DescribeMacro{\xlinkn} 
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\xlinkn}[2]{\xmlattributes*{a}{target="_blank"}\xlink{#1}{#2}} 
%</hlx>
%    \end{macrocode}
%
%    Here's the do-nothing \latex\ version:
%
%    \begin{macrocode}
%<*cls>
\newcommand{\xlinkn}[2]{#1}
%</cls>
%    \end{macrocode}
%
%
% \section{Overall Layout}
%
%    This section contains the font change and page layout commands.
%    
%    The fonts I use are Times Roman for the main text, Helvetica for
%    headlines and miscellaneous emphasis, and Computer Modern
%    Monospace for the typed output. (The PS Courier is too light when
%    rendered on the screen in xdvi.)
%
%    I've also defined a |\HUGE| command for the chapter headings.
%    Somehow, the |\Huge| command wasn't really big enough for me.
%    \DescribeMacro{\HUGE}\index{default fonts}\index{font choices}
%
%    \begin{macrocode}
%<*cls>
\renewcommand{\rmdefault}{ptm}
\renewcommand{\sfdefault}{phv}
\renewcommand{\ttdefault}{cmtt}
\newcommand{\HUGE}{\@setfontsize\HUGE{100}{105}}
%</cls>
%    \end{macrocode}
%
%    The following rearranges the default paragraph look to have no
%    indent and to have an extra bit of empty space between paragraphs.
%
%    \begin{macrocode}
%<*cls>
\setlength{\parindent}{0pt}
\setlength{\parskip}{\medskipamount}
%</cls>
%    \end{macrocode}
%
%    The set a default indentation for verbatim examples in
%    the text, for example code samples.  The preferred style is:
%    \begin{verbatim}
%    \begin{vcode}{ib}
%     ... stuff ...
%    \end{vcode}
%    \end{verbatim}%
%    It is ok to use the numbering or the smaller text sizes for
%    |vcode|. 
%
%    The |vcode| (and occasionally |verbatim|) environments are for
%    example code, for file contents, and for example output.  If it's
%    something that a user types, use the |example| environment.
%    \DescribeEnv{vcode}\DescribeEnv{verbatim}\DescribeEnv{example}
%
%    The |example| environment was originally part of hyperlatex.  It
%    still is, I suppose, but it had the |\exampleindent| feature
%    removed in version 2.5.  So it is now included herein.  The html
%    version of the |example| environment is still ok.
%
%    \begin{macrocode}
%<*cls>
\setlength{\vcodeindent}{20pt}
\newlength{\exampleindent}
\setlength{\exampleindent}{20pt}

\renewenvironment{example}{
  \list{}{\leftmargin\exampleindent
    \itemindent\z@ \rightmargin\z@ \parsep \z@ plus\p@}\item[]\tt
  \turnon@spaces\turnon@lines \let\do\@makeother \Hlx@example
}{\endlist}
%</cls>
%    \end{macrocode}
%
%    Marginpars are used in a few of the draft mode macros, and
%    |\draftmarginpar| is used to put them in
%    place. \DescribeMacro{\draftmarginpar} 
%    Unfortunately, these do not work when you're in a parbox.  So the
%    following contains a kind of a workaround to disable the macros when
%    they can't be used.  The flag is to be set whenever you're in a
%    parbox, and |\@arrayparboxrestore| is apparently called whenever
%    a parbox is opened.  There probably shouldn't be index entries in
%    parboxes very often, but it occasionally happens.
%
%    \begin{macrocode}
%<*cls>
\newif\if@notinparbox \@notinparboxtrue
\expandafter\def\expandafter\@arrayparboxrestore
 \expandafter{\@arrayparboxrestore \@notinparboxfalse}
\newcommand\draftmarginpar[2]{\if@dodsdraft\if@notinparbox
  \marginpar{\scriptsize{#1}: #2}
  \else\typeout{dropped marginpar-->#1:#2}\fi\fi}
%</cls>
%    \end{macrocode}
%
%    Here are some of the macros whose use changes under the `draft'
%    option. \DescribeMacro{\tbd}  The |\tbd| format is the most
%    useful.  In `draft' mode, it prints a message in the margin, but
%    in final mode, it gobbles the argument.  \DescribeMacro{\labl}
%    The |\labl| macro can be used to debug label errors, and
%    \DescribeMacro{\citel} |\citel| is also useful for debugging
%    citations. 
%
%    \begin{macrocode}
%<*cls>
\newcommand{\tbd}[1]{\draftmarginpar{\bf TBD}{#1}}
\newcommand{\labl}[1]{\label{#1}
  \draftmarginpar{\ensuremath{\cal\ L}}{#1}}
\newcommand{\citel}[1]{\cite{#1}
  \draftmarginpar{\ensuremath{\cal\ C}}{#1}}
%</cls>
%    \end{macrocode}
%
%
%    The `draft' mode isn't really useful in \hlx .  Presumably, by
%    the time you get to converting to html, all this stuff is
%    debugged. 
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\tbd}[1]{}
\newcommand{\labl}[1]{\label{#1}}
\newcommand{\citel}[1]{\cite{#1}}
%</hlx>
%    \end{macrocode}
%
%    The page lengths can vary slightly, and I don't justify
%    the paragraphs.  Also, the book page height, as defined in LaTeX
%    is too short.  Since this book is almost always printed on 8.5x11
%    or A5 paper, it's stupid to lay it out for a 9.25in book. 
%
%    \begin{macrocode}
%<*cls>
\raggedbottom
\raggedright
\addtolength\textheight{75pt}
%</cls>
%    \end{macrocode}
%
%  \subsection{Page Headings and Footings}
%    The dods-book2 template uses the |fancyhdr| package to define its
%    page style.
%
%    \begin{macrocode}
%<*cls>
\pagestyle{fancy}
\setlength\headheight{15pt}
\addtolength{\headwidth}{\marginparsep}
\addtolength{\headwidth}{\marginparwidth}
\renewcommand{\chaptermark}[1]{\markboth{#1}{}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}
\fancyhf{}
\fancyhead[LE,RO]{\sffamily\bfseries\thepage}
\fancyhead[LO]{\sffamily\bfseries\rightmark}
\fancyhead[RE]{\sffamily\bfseries\leftmark}
\renewcommand{\headrulewidth}{2pt}
\fancypagestyle{plain}{\fancyhead{}\renewcommand{\headrulewidth}{0pt}}
%</cls>
%    \end{macrocode}
%
%  In draft mode, the footer will have the time and date on it.
%
%    \begin{macrocode}
%<*cls>
\if@dodsdraft\fancyfoot[C]{\sffamily\bfseries\today:\showtime}\fi
%</cls>
%    \end{macrocode}
%
%  \subsection{Lists}
%
%    This is strictly to make lists a little more fun.  This uses
%    dingbat characters in lists.  The itemize list gets little arrows
%    (252), and the enumerate lists get little numbers in black
%    circles. 
%
%    A downside of this is that the 
%    enumerate list now only deals with up to ten items.  It will, I
%    think, go to more than that, but it may look pretty funny.
%    \DescribeEnv{itemize}\DescribeEnv{enumerate}
%    \index{pifont package}
%
%    \begin{macrocode}
%<*cls>
\renewenvironment{itemize}{\begin{dinglist}{252}}{\end{dinglist}}
\renewenvironment{enumerate}{\begin{dingautolist}{182}}{\end{dingautolist}}
%</cls>
%    \end{macrocode}
%
% \subsection{Marginalia}
%
%    I like to have little subject descriptions accompanying the text
%    in a manual.  It helps when you browse.  The text in a subject
%    box should be descriptive of the nearby text.  For example, when
%    a paragraph tells how to do something, the subject note can say
%    ``doing something''.  Here is an example from the Matlab GUI User
%    Guide: 
%
%    \begin{quote}
%    The GUI is designed for the retrieval and display of data served
%    by a DODS server. This means that in order for the GUI to read your
%    data, there must be a DODS server on a machine connected to the
%    net     somewhere, with access to that data.  This is a relatively 
%    simple affair for datasets stored in one of the several formats
%    DODS supports. The server itself is a typical httpd server,
%    adapted with a set of DODS CGI programs. To set up a server for
%    your data, please refer to the DODS user guide.
%    |\subj{Start with getting your data served by a DODS server.}|
%    \end{quote}
%
%    \begin{macrocode}
%<*cls> 
\newcommand{\subj}[1]{\marginpar{{\small\sffamily\itshape\raggedright#1}}}
%</cls>
%    \end{macrocode}
%
%    \index{marginpar (wrong side)}\index{confused marginpar}
%    \index{subj (wrong side)}
%    Here's a \latex\ wierdness recently noted.  The marginpars often
%    come out on the wrong side of the page, until explicit (and
%    apparently redundant) |\pagebreak| commands are inserted at the
%    pagebreaks.  For some reason the |\thepage| counter doesn't work
%    quite right just after \latex\ uses its discretion to insert a
%    pagebreak.  Avoiding this work is the purpose of the
%    |mparhack| package. 
%    \index{mparhack package.} 
%
%    Note that since the |mparhack| package introduces quite a
%    bit of overhead for each marginpar (a new label for each one), we
%    only turn it on for non-draft versions.  If this is a problem,
%    edit |dods-book2.cls| and remove the |\if@dodsdraft| condition
%    from the |\RequirePackage{mparhack}| line near the front.
%
% \subsubsection{HTML Marginalia}
%
%    The |\subj| macro implementation requires a perl script (which
%    requires the ImageMagick program, and its perl module interface
%    called PerlMagick). 
%
%
%    \begin{macrocode}
%<*hlx>
\newcounter{subj}
\HlxEval{
(put 'HlxMakeGif 'hyperlatex 'hyperlatex-make-gif)

(defun hyperlatex-make-gif ()
  (let* ((file (concat hyperlatex-html-directory  "/"
                      (hyperlatex-parse-required-argument)))
         (text (concat (hyperlatex-parse-required-argument)))
         (filefix (hyperlatex-evaluate-string file))
         (textfix (hyperlatex-evaluate-string text)))
    (message "Generating %s with %s" filefix textfix)
    (if hyperlatex-final-pass
      (call-process "giftext.pl" nil t nil filefix textfix))))
}

\newcommand{\subj}[1]{\HlxMakeGif{subj-\thesubj{}.gif}{#1}%
\htmlimage[class="subj" align="right"]{subj-\thesubj{}.gif}%
\stepcounter{subj}}
%</hlx>
%    \end{macrocode}
%
%    Note that the above macro relies on a perl script called "giftext.pl", 
%    which has its own dependencies, noted above.
%
%
% \section{HTML Layout}
%
% \subsection{Document Look}
%
%    Use a style sheet to control the document look.
%
%    \begin{macrocode}
%<*hlx>
\htmlcss{/resources/dods-book.css}
%</hlx>
%    \end{macrocode}
%
%    Set the default background color of all the pages, and make all the
%    tables have borders.
%
%    \begin{macrocode}
%<*hlx>
%\xmlattributes{body}{bgcolor="#f6faff"}
\xmlattributes{table}{border}
%</hlx>
%    \end{macrocode}
%
% \subsection{Navigation Panel}
%
%    The navigation panels appear on each page, and consist of a bunch
%    of icons, the javascript and button definitions that use those
%    icons, and then a couple of macro definitions to build the top,
%    title, and bottom navigation panels.
%
%    First the icons.
%
%
% \subsubsection{Icon Server}
%
%    \begin{macro}{\HlxIcons}
%    The navigation panel icons come from a central place.  Define
%    that place with this command, unless the following will suffice.
%    HlxIcons has an argument so that we can use it like this: 
%    |\HlxIcons{}db-bg.gif|
%
%    \begin{macrocode}
%<*hlx>
\renewcommand{\HlxIcons}[1]{\OPDhomeUrl/icons/}
%</hlx>
%    \end{macrocode}
%    \end{macro}
%
%    The icons in use for dods-book2 are as follows:
%
%    \begin{itemize}
%      \item |ts-prev.gif|
%      \item |ts-prev-gr.gif|
%      \item |ts-up.gif|
%      \item |ts-up-gr.gif|
%      \item |ts-next.gif|
%      \item |ts-next-gr.gif|
%      \item |ts-index.gif|
%    \end{itemize}
%
%    Most of the names are self-explanatory.  (``db'' stands for 
%    ``dods-book''.)  |db-fill.gif| is a black
%    icon used when the option should not be available, |db-dods.gif|
%    is a picture of the word ``DODS'', and |db-bg.gif| is a background
%    image to use.
%
% \subsubsection{Button Definitions}
%
%    Using the icons specifed above, the following definitions create
%    the buttons:
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\HlxImage}[3]{\xmlattributes*{img}{border="0" name="#2"}%
  \htmlimg{#3}{#1}}
\newcommand{\HlxNVODSButton}{\xlink{%
  \xmlattributes*{img}{border="0" height="75" name="NVODS Home"}%
  \htmlimg{http://opendap.org/images/nvods.png}{NVODS Home}}{http://www.nvods.org}}
\newcommand{\HlxLeftImage}{\HlxIcons{}ts-prev.gif}
\newcommand{\HlxLeftBlank}{\HlxImage{}{no way back}{\HlxIcons{}ts-prev-gr.gif}}
\newcommand{\HlxRightImage}{\HlxIcons{}ts-next.gif}
\newcommand{\HlxRightBlank}{\HlxImage{no way forward}{}{\HlxIcons{}ts-next-gr.gif}}
\newcommand{\HlxUpImage}{\HlxIcons{}ts-up.gif}
\newcommand{\HlxUpBlank}{\HlxImage{no way up}{}{\HlxIcons{}ts-up-gr.gif}}
\newcommand{\HlxIndexImage}{\HlxIcons{}ts-index.gif}
\newcommand{\HlxLeftButton}[2]{\xlink{\HlxImage{#1}{#1}{\HlxLeftImage}}{#2}}
\newcommand{\HlxUpButton}[2]{\xlink{\HlxImage{#1}{#1}{\HlxUpImage}}{#2}}
\newcommand{\HlxRightButton}[2]{\xlink{\HlxImage{#1}{#1}{\HlxRightImage}}{#2}}
%\newcommand{\HlxIndexButton}[2]{\xlink{\HlxImage{#1}{#1}{\HlxIndexImage}}{#2}}
\newcommand{\HlxIndexButton}[2]{\xlink{\xmlattributes*{font}%
  {size="+2" face="lucida sans,helvetica,arial"}\xml{font}\xml{b}%
  \xml{i}Index\xml{/i}\xml{/b}\xml{/font}}{#2}}
%</hlx>
%    \end{macrocode}
%
%
% \subsubsection{Javascript}
%
%    \DescribeEnv{javascript} There is a way to include Javascript in
%    your pages.  The |javascript| environment formats its contents
%    with |<script>| tags.  \DescribeMacro{\HlxJS} The |\HlxJS| macro
%    is expanded in the header of each page.  So if you want some
%    javascript to go into each page, do this:
%    \begin{verbatim}
%    \renewcommand{\HlxJS}{\begin{javascript}
%     ... stuff ...
%    \end{javascript}}
%    \end{verbatim}%
%    
%    \begin{macrocode}
%<*hlx>
\newcommand{\HlxJS}{}
\renewcommand{\HlxMetaFields}[1]{\HlxJS\HlxMeta\HlxMetaCss\HlxMetaCharset}
%</hlx>
%    \end{macrocode}
%
%    The |javascript| environment expands LaTeX macros it contains.
%    Ideally, it should work so that each invocation of the
%    environment adds some javascript code to the pile that is
%    contained in each new page.  There should also be a starred
%    version |\begin{javascript}*| which only inserts its javascript
%    into the next page output.  This would work by storing the
%    |javascript| environment contents in a separate buffer or stack,
%    and dumping its contents each time the |\HlxJS| macro is invoked.
%    However, right now, the only way to approximate the effect is the
%    method outlined above.
%
%    \begin{macrocode}
%<*hlx>
\HlxEval{
(put 'javascript    'hyperlatex 'hyperlatex-format-javascript)
(put 'endjavascript 'hyperlatex 'hyperlatex-format-endjavascript)
(defvar hyperlatex-begin-javascript (point-min))
  
(defun hyperlatex-format-javascript ()
  (if (hyperlatex-starred-p) (insert "*********"))
  (hyperlatex-blk)
  (setq hyperlatex-begin-javascript (point))
  (hyperlatex-gen "script language=\"javascript\"")
  (let ((hyperlatex-special-chars-regexp
         (concat "[\\\\" hyperlatex-meta-| "]"))
        (hyperlatex-example-depth hyperlatex-recursion-depth)
        (hyperlatex-active-space nil))
    ;; recursive call returns shortly after processing \end{javascript}
    (hyperlatex-format-region (point) (point-max))))

(defun hyperlatex-format-endjavascript ()
  (hyperlatex-gen "/script")
  (insert "\n"))
}
%</hlx>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*cls>
\newenvironment{javascript}{\comment}{\endcomment}
%</cls>
%    \end{macrocode}
%
%%
% \subsubsection{Navigation Panel Definitions}
%
%    Each html page starts with a \DescribeMacro{\HlxTopPanel}
%    |\HlxTopPanel|, and ends with \DescribeMacro{\HlxBottomPanel}
%    \DescribeMacro{\HlxBottomMatter} the |\HlxBottomMatter|, usually the
%    name of the author (or converter), and the date of generation,
%    followed by |\HlxBottomPanel| a slightly abbreviated navigation
%    panel. 
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\HlxTopPanel}{\xmlattributes*{table}%
{border="0" cellspacing="0" cellpadding="0" width="100%"}%
\xmlattributes*{td}{valign="top" align="left" height="60"}%
\xml{table}\xml{tr}\xml{td}%
\xmlattributes*{table}{border="0" cellspacing="0" cellpadding="0"}%
\xml{table}\xml{tr}\xml{td}%
\EmptyP{\HlxBackUrl\HlxUpUrl\HlxForwUrl}{%
\EmptyP{\HlxBackUrl}{\HlxLeftButton{\HlxBackTitle}{\HlxBackUrl}}{\HlxLeftBlank}
\EmptyP{\HlxUpUrl}{\HlxUpButton{\HlxUpTitle}{\HlxUpUrl}}{\HlxUpBlank}
\EmptyP{\HlxForwUrl}{\HlxRightButton{\HlxForwTitle}{\HlxForwUrl}}{\HlxRightBlank}
\EmptyP{\HlxIndexUrl}{\HlxIndexButton{Index}{\HlxIndexUrl}}{}}{}
\xml{/td}\xml{/tr}
\xml{tr}\xml{td}
\xml{div class="navigation"}\EmptyP{\HlxBackUrl}
{\textbf{\HlxGoBackName} \xlink{\HlxBackTitle}{\HlxBackUrl}\\}{}
\EmptyP{\HlxUpUrl}
{\textbf{\HlxGoUpName} \xlink{\HlxUpTitle}{\HlxUpUrl}\\}{}
\EmptyP{\HlxForwUrl}
{\textbf{\HlxGoForwardName} \xlink{\HlxForwTitle}{\HlxForwUrl}\\}{}
\xml{/div}
\xml{/td}\xml{/tr}\xml{/table}\xml{/td}
\xmlattributes*{td}{valign="top" align="right"}
\xml{td}%
\HlxNVODSButton\xml{/td}%
\xml{/tr}
\xml{/table}}
%</hlx>
%    \end{macrocode}
%
%    The |\HlxBottomMatter| is usually a name and a date.  Use the
%    |\htmladdress| macro\DescribeMacro{\htmladdress} to set the text
%    to use in the bottom matter.
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\HlxBottomMatter}{%
  \HlxBlk\htmlrule\EmptyP{\HlxAddress}
  {\html{address}\HlxAddress\HlxBlk\html{/address}\\}{}}
%</hlx>
%    \end{macrocode}
%
%    The bottom panel is just a top panel without the section and
%    chapter titles.
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\HlxBottomPanel}{\EmptyP{\HlxBackUrl\HlxUpUrl\HlxForwUrl}{
\xml{div class="navigation"}\EmptyP{\HlxBackUrl}
{\textbf{\HlxGoBackName} \xlink{\HlxBackTitle}{\HlxBackUrl}\\}{}
\EmptyP{\HlxUpUrl}
{\textbf{\HlxGoUpName} \xlink{\HlxUpTitle}{\HlxUpUrl}\\}{}
\EmptyP{\HlxForwUrl}
{\textbf{\HlxGoForwardName} \xlink{\HlxForwTitle}{\HlxForwUrl}\\}{}
\xml{/div}}{}}
%</hlx>
%    \end{macrocode}
%
%
% \subsubsection{Top-level Navigation}
%
%    The following definition is of the very top-level navigation
%    panel.  
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\titlepanel}{\xmlattributes*{table}%
{border="0" cellspacing="0" cellpadding="0" width="100%"}%
\xmlattributes*{td}{valign="top" align="left" height="60"}%
\xml{table}\xml{tr}\xml{td}%
\HlxLeftBlank
\EmptyP{\OPDDoc}{\HlxUpButton{\opendap Documentation}{\OPDDoc}}{}
\EmptyP{\HlxForwUrl}{\HlxRightButton{\HlxForwTitle}{\HlxForwUrl}}{\HlxRightBlank}%
\EmptyP{\HlxIndexUrl}{\HlxIndexButton}{}%
\xml{/td}\xmlattributes*{td}{valign="top" align="right"}\xml{td}%
\HlxNVODSButton\xml{/td}%
\xml{/tr}\xml{/table}}%
%</hlx>
%    \end{macrocode}
%
%    The top-level navigation panel should appear in the title page.
%    The regular navigation panel does not appear in the first node
%    (|\htmlpanel{0}|), but it is turned on at the end of |\maketitle|
%    so that it will appear everywhere after this.
%
%    \begin{macrocode}
%<*hlx>
\renewcommand{\maketitle}{
\EmptyP{\HlxTitleP}{\HlxBlk\titlepanel\xml{h1 class="title"}\HlxTitle\xml{/h1}
\EmptyP{\HlxAuthorP}{\xml{h2 class="title"}\HlxAuthor\xml{/h2}}{}
\EmptyP{\HlxDate}{\xml{h3 class="title"}\HlxDate\xml{/h3}}{}}{}\htmlpanel{1}}
%</hlx>
%    \end{macrocode}
%
% \subsubsection{The Index}
%
%    \DescribeMacro{\HlxIndexUrl} The following \hlx\ extension finds
%    the URL of the index node so that the navigation panels can
%    include it.  In a document, you can refer to it as |\HlxIndexUrl|.  
%
%    \begin{macrocode}
%<*hlx>
\HlxEval{

(put 'HlxIndexUrl    'hyperlatex 'hyperlatex-ts-hlxindexurl)

(defvar hyperlatex-ts-index-url nil)

(defun hyperlatex-ts-hlxindexurl ()
  "Provides the index url. ts."
  (if hyperlatex-final-pass
    (progn
      (if (null hyperlatex-ts-index-url)
        (let ((sp hyperlatex-sections))
          (while (and sp
                      (not (string= 
                             (hyperlatex-sect-head (car sp)) 
                             "Index")))
            (setq sp (cdr sp)))
            ;; sp points to section -- or is nil
          (if sp 
            (setq hyperlatex-ts-index-url
              (hyperlatex-gen-url
                (hyperlatex-sect-node (car sp))
                (hyperlatex-sect-label (car sp))))
            (setq hyperlatex-ts-index-url "")) ))
      (insert hyperlatex-ts-index-url))))

}
%</hlx>
%    \end{macrocode}
%
%
% \section{Sectioning Commands}
%
%    The goal here was to create some more interesting section
%    headers.  So chapter heads now are moved over to the right, with a
%    |\HUGE| numeral indicating the chapter, followed by a thick rule.
%    Section heads are preceded by a thick rule.  All the heads are in
%    the sans-serif font. Only the chapters, sections, and subsections
%    are numbered.  (And parts, if there are any.)
%
%  \subsection{Chapters}
%
%    Here is the chapter redefinition.  Chapters are right-justified,
%    starting with a |\HUGE| numeral.  They are followed by a thick
%    rule.  The starred chapter redefinition is here, as well.
%
%    The kerning of the numerals deserves some attention.  Essentially,
%    this is waiting for me to figure out what kind of test can tell
%    when the last character in a macro argument is a `1'.  This is
%    \TeX\ wizardry beyond my ken for now.  The problem is that the `1' 
%    characters seem to have some extra space to their right.  For now
%    this is solved by having the first invocation of this macro set
%    the number with a kern of -17pt, and all invocations after that
%    with a kern of -4 pt.  Therefore, chapter 11 will look bad.  Of
%    course, it does anyway because of the extra space between the 1
%    and the 1. 
%
%    \begin{macrocode}
%<*cls>
\newlength{\chapKern}
\setlength{\chapKern}{-17pt}
\newlength{\chapHeadWidth}
\setlength{\chapHeadWidth}{\linewidth}
\addtolength{\chapHeadWidth}{\marginparwidth}
\addtolength{\chapHeadWidth}{\marginparsep}
\renewcommand\@makechapterhead[1]{
  \bgroup
  \vspace*{60\p@}%
  \parbox{\chapHeadWidth}{\raggedleft
    \ifnum \c@secnumdepth >\m@ne
      \if@mainmatter
        \setbox0\hbox{\HUGE\bfseries\sffamily\thechapter}
        \unhbox0\kern\chapKern
        \par\nobreak
      \fi
    \fi
    \interlinepenalty\@M
    \Huge\bfseries\sffamily #1\par\nobreak
    \vskip 10\p@
    \hrule height2pt}
    \vskip 10\p@
    \egroup
    \setlength{\chapKern}{-4pt}
  }
\renewcommand\@makeschapterhead[1]{%
  \vspace*{130\p@}%
  \parbox{1.2\linewidth}{\raggedleft
    \interlinepenalty\@M
    \Huge \bfseries\sffamily  #1%
    \vskip 10\p@
    \hrule height2pt}
  \@mkboth{#1}{}
    \vskip 10\p@
  }
%</cls>
%    \end{macrocode}
%
%  \subsection{Sections}
%  
%    Here are the section redefinitions.  These aren't quite right,
%    either, but the alternative is rewriting many |\def|'s.  So I
%    think they're ok for now.
%
%    The ifdim statement in the section definition checks to see 
%    whether we're more than halfway down the page.  If so, a page
%    break is encouraged.  If not, go ahead.
%
%    \begin{macrocode}
%<*cls>
\renewcommand\section{\@startsection {section}{1}
    {\z@}%
    {13.5ex \@plus -1ex \@minus -.2ex}%
    {2.3ex \@plus.2ex}%
    {\bgroup\dimen100=\pagegoal\divide\dimen100 by 2%
     \vfil\ifdim\pagetotal>\dimen100\penalty-100\fi\vfilneg\egroup%
     \sffamily\Large\bfseries\hrule height2pt%
      \penalty10000}}
\renewcommand\subsection{\@startsection{subsection}{2}
    {\z@}%
    {3.25ex\@plus -1ex \@minus -.2ex}%
    {1.5ex \@plus .2ex}%
    {\sffamily\large\bfseries}}
\renewcommand\subsubsection{\@startsection{subsubsection}{3}
    {\z@}%
    {-3.25ex\@plus -1ex \@minus -.2ex}%
    {1.5ex \@plus .2ex}%
    {\sffamily\normalsize\bfseries}}
%</cls>
%    \end{macrocode}
%
%    The |\@ssect| command was redefined to adjust the vertical
%    spacing.  I don't know if this is the right place to do so, but so
%    I did.
%
%    \begin{macrocode}
%<*cls>
\renewcommand\@ssect[5]{
  \vspace{-0.5\@tempskipa}
  \@tempskipa #3\relax
  \ifdim \@tempskipa>\z@
    \begingroup
      #4{\penalty-500\vskip3pt\penalty10000
        \@hangfrom{\hskip #1}
          \interlinepenalty \@M #5\@@par}
    \endgroup
  \else
    \def\@svsechd{#4{\hskip #1\relax #5}}
  \fi
  \@xsect{#3}}
%</cls>
%    \end{macrocode}
%
%
% \subsection{Numbering}
%    Chapters, sections, and subsections (and parts) should be
%    numbered.  Others need not be.
%
%    \begin{macrocode}
%<*hlx|cls>
\setcounter{secnumdepth}{2}
%</hlx|cls>
%    \end{macrocode}
%
%
% \subsection{\hlx\ Version}
%
%    There are a couple of different aspects to \hlx\ sectioning.  The
%    first is choosing at what level of organization are the components
%    separated into different files.  Numbering is another aspect.    
%
%
% \subsubsection{Sectioning}
%
%    Most of the books don't have parts.  This means that the base
%    level of division is the chapter level (for \hlx , this is level
%    0). The |HlxSecNumBase| counter is to be set to one less than the
%    base level.  So if a book has parts, this counter must be reset to
%    -2.  Similarly, if there are no chapters, only sections, you can
%    set it to 0.
%
%    \begin{macrocode}
%<*hlx>
\setcounter{HlxSecNumBase}{-1}
%</hlx>
%    \end{macrocode}
%
%
%    The |htmldepth| counter determines how many different files will
%    be created.  A value of four means, for example, that
%    subsubsections each merit their own file, containing paragraphs
%    and sub-paragraphs.  Change it to three to make separate
%    subsection files, each containing lots of subsubsections.
%
%    \begin{macrocode}
%<*hlx>
\setcounter{htmldepth}{4}
%</hlx>
%    \end{macrocode}
%
% \subsubsection{Numbering}
%
%    Numbering must be specified in \hlx .  Here is that specification.
%
%    \begin{macrocode}
%<*hlx>
\newcounter{part}
\renewcommand{\thepart}{\Alph{part}}
\newcounter{chapter}
\newcounter{section}[chapter]
\renewcommand{\thesection}{\thechapter.\arabic{section}}
\newcounter{subsection}[section]
\renewcommand{\thesubsection}{\thesection.\arabic{subsection}}
\newcounter{subsubsection}[subsection]
\renewcommand{\thesubsubsection}{\thesubsection.\arabic{subsubsection}}
\newcounter{paragraph}
\newcounter{subparagraph}[paragraph]
\renewcommand{\thesubparagraph}{\theparagraph.\arabic{subparagraph}}
%</hlx>
%    \end{macrocode}
%
%
% \subsubsection{Appendix Numbering}
%
%    \DescribeMacro{\appendix} The following macro recreates the
%    |\appendix| command, causing  all chapters after the command to be
%    rendered in letters instead of numbers.
%
%    \begin{macrocode}
%<*hlx>
\HlxEval{
(put 'appendix       'hyperlatex 'hyperlatex-ts-format-appendix)

(defun hyperlatex-ts-format-appendix ()
  (progn
    (hyperlatex-setcounter "chapter" 0)
    (hyperlatex-define-macro "thechapter" 0
      (concat "\\Alph{chapter}") "")))
}
%</hlx>
%    \end{macrocode}


% \iffalse ******************comment out
%
% The following is the beginnning of putting the chapter names into
% the xrefs.  It will probably require fiddling with the
% hyperlatex-format-label command and the hyperlatex-labels alist to
% make it work.  Save for later (now is 1/18/99) ts.
%
%\newcommand{\chapterref}[1]{Chapter~\ref{#1}}
%
%\HlxEval{
%
%(put 'chapterref     'hyperlatex 'hyperlatex-ts-format-chapterref)
%
%(defun hyperlatex-ts-format-chapterref ()
%  (let ((deflt (hyperlatex-parse-optional-argument))
%        (label (hyperlatex-parse-evaluated-argument
%                (concat "[\\\\" hyperlatex-meta-| "]"))))
%    (if hyperlatex-final-pass
%        (let ((match (assoc label hyperlatex-labels)))
%          (if match
%              (let ((str (nth 3 match)))
%                (if (string= str "")
%                    (insert (if deflt deflt "X"))
%                  (insert "Chapitre " str)))
%            (hyperlatex-message "WARNING: Unknown label %s " label)
%            label)))))
%}
% comment out************\fi 
%
%
%
% \subsection{Table of Contents}
%   
%    There has been a little mucking around with the table of
%    contents-making commands.  The goals were these: 
%
%    \begin{itemize}
%    \item To keep excessive space from leaking into the TOC (a risk
%      when the paragraph style is redefined to scrap the indentation
%      and put extra line space between paragraphs); and
%    \item To make the table of figures and table of tables into
%      sub-parts of the TOC rather than separate pages of their own.
%    \end{itemize}
%
%    The following macro is lifted right out of |book.cls|, enclosed in
%    a group, and had its |\parskip| redefined.
%
%    \begin{macro}{\tableofcontents}
%    \begin{macrocode}
%<*cls>
\renewcommand\tableofcontents{
  \bgroup\setlength{\parskip}{0pt}
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \chapter*{\contentsname
    \@mkboth{
      \contentsname}{\contentsname}}
  \@starttoc{toc}
  \if@restonecol\twocolumn\fi\egroup
  }
%</cls>
%    \end{macrocode}
%    \end{macro}
%
%    Here are the LOF and LOT definitions.  Besides the same
%    modifications as |\tableofcontents|, all they've had done is a 
%    substitution of |\section*| for |\chapter*| in the respective
%    definitions.
%
%    \begin{macrocode}
%<*cls>
\renewcommand\listoffigures{
  \bgroup\setlength{\parskip}{0pt}
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \section*{\listfigurename
    \@mkboth{Contents}{Contents}}
  \@starttoc{lof}
  \if@restonecol\twocolumn\fi\egroup
  }
\renewcommand\listoftables{
  \bgroup\setlength{\parskip}{0pt}
  \if@twocolumn
    \@restonecoltrue\onecolumn
  \else
    \@restonecolfalse
  \fi
  \section*{\listtablename
    \@mkboth{Contents}{Contents}}
  \@starttoc{lot}
  \if@restonecol\twocolumn\fi\egroup
  }
%</cls>
%    \end{macrocode}
%
%    The TOC entries were also adjusted to all appear in the sanserif
%    font. Getting the entries to do this is easy:
%
%    \begin{macrocode}
%<*cls>
\addtocontents{toc}{\sffamily}
\addtocontents{lof}{\sffamily}
\addtocontents{lot}{\sffamily}
%</cls>
%    \end{macrocode}
%
%    Getting the numbers to be in sanserif font was more challenging.
%    I guess a better way to do this would have been to redefine the
%    normal font.  TBD: This would probably make the whole thing a
%    little more robust.
%
%    \begin{macrocode}
%<*cls>
\renewcommand\@dottedtocline[5]{%
  \ifnum #1>\c@tocdepth \else
    \vskip \z@ \@plus.2\p@
    {\leftskip #2\relax \rightskip \@tocrmarg \parfillskip -\rightskip
     \parindent #2\relax\@afterindenttrue
     \interlinepenalty\@M
     \leavevmode
     \@tempdima #3\relax
     \advance\leftskip \@tempdima \null\nobreak\hskip -\leftskip
     {#4}\nobreak
     \leaders\hbox{$\m@th
        \mkern \@dotsep mu\hbox{.}\mkern \@dotsep
        mu$}\hfill
     \nobreak
     \hb@xt@\@pnumwidth{\hfil\sffamily \normalcolor #5}%
     \par}%
  \fi}
%</cls>
%    \end{macrocode}
%
%
%
%
% \subsubsection{HTML Contents}
%
%    Because of the usual structure of web pages, the html tables of
%    contents are a completely different animal from the \latex\
%    version.  Therefore, I've begun by defanging the \latex\ contents
%    commands.  Note that this all implies a new structure to the
%    document preface, which must be rearranged to make the TOC look
%    right. 
%
%    The preface should look like this, with a short abstract appearing
%    between the |\T\chapter| and the |\W\chapter|. 
%
%    \begin{verbatim}
%    \T\chapter*{Preface}
%    \T\addcontentsline{toc}{chapter}{Preface}
%    
%    This document describes...
%    
%    What's in it is...
%    
%    It's for whom...
%    \W\htmlmenu{4}
%    \W\chapter*{Preface}
%    
%    Rest of preface text...
%    
%    \end{verbatim}
%
%    For examples, you can refer to the DODS User Guide.
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\tableofcontents}{}
\newcommand{\listoffigures}{}
\newcommand{\listoftables}{}
%</hlx>
%    \end{macrocode}
%
%    The following turns off navigation panels for all the nodes of the
%    document, and names the top node ``Contents.''  The navigation
%    panels are turned back on after the top node is started (see the
%    |\maketitle| macro).
%
%    \begin{macrocode}
%<*hlx>
\htmlpanel{0}
\htmltopname{Contents}
%</hlx>
%    \end{macrocode}
%
%    All the automatic menus in each file are to refer to the next two
%    deeper levels.  So, for example, the menu in a chapter head will
%    contain references to sections and subsections, but not
%    subsubsections. Use this counter to adjust that.
%
%    \begin{macrocode}
%<*hlx>
\setcounter{htmlautomenu}{2}
%</hlx>
%    \end{macrocode}
%
%
% \subsection{Trouble-shooting Sections}
%
%    These two ``problem/fix'' \DescribeMacro{\problem}
%    \DescribeMacro{\fix} macros are useful in pairs, to be used in
%    ``troubleshooting''  chapters or appendices.
%
%    \begin{macrocode}
%<*cls>
\newcommand{\problem}{\paragraph{\textsc{\sffamily Problem}:}}
\newcommand{\fix}{\vspace{-2.0\parskip}\paragraph{\textsc{\sffamily Fix}:}}
%</cls>
%    \end{macrocode}
%
% \subsubsection{\hlx\ Version}
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\problem}{\paragraph{\textsc{Problem}:}}
\newcommand{\fix}{\vspace{-2.0\parskip}\paragraph{\textsc{Fix}:}}
%</hlx>
%    \end{macrocode}
%
% \subsection{References and Labels}
%
%    You can make external HTML references \emph{into} a DODS book by
%    using the \hlx\ |\xname| macro.  Put this macro immediately
%    before a |\chapter|, |\section|, or |\subsection| declaration.
%    The argument to the |\xname| macro will become the filename of
%    that section (with |.html| appended).  This name will survive
%    reformatting and so on.
%
%    To use external references well, label delimiter should be
%    periods or commas.  Don't use colons.\index{:}\index{.}\index{,}
%    \index{external references}\index{references, external}
%
% \section{Figures and Figure Placement}
%
% \subsection{The Basic}
%
%    \begin{macro}{\figureplace}
%    Figures should be included in a dods document with the
%    |\figureplace| macro.  This macro elides a couple of difficulties
%    in converting \latex\ to HTML.  For one, the |\label| command
%    needs to be before the figure in HTML and after the figure for
%    \latex .  For another, postscript figures are the norm for \latex\
%    while gifs and jpegs are the norm for html.
%
%    Containing figures in the macro also allows me to adjust the
%    figure right-to-left so that it fits well onto the page, and to
%    accommodate the eventual text-wrapping around narrow
%    figures. (TBD) 
%
%    Use the macro like this:
%    \begin{verbatim}
%    \figureplace[a0]{a}{b}{c}{d.ps}{d.gif}{e.html}
%    \end{verbatim}
%    Where:
%
%    \begin{description}
%    \item[\tt a] The figure caption.  Note that footnotes may not work
%      from here.  {\tt a0} is the optional argument to the |\caption|
%      command.  This argument will appear in the list of figures, in
%      case the actual figure caption is quite long.  Note that the
%      html has no table of figures, so this argument is ignored.
%    \item[\tt b] Is the figure placement argument, consisting of the
%      letters |h|, |t|, |b|, |p|, in whatever order you like.
%    \item[\tt c] The figure's cross-reference label,
%      e.g. |fig,DDS,diagram| and so on.  (Note DODS doc tools style:
%      don't use colons, use commas or periods to delineate label
%      hierarchies.) 
%    \item[\tt d.ps] The filename of the postscript version of the figure.
%      This is ignored in the html output.  
%    \item[\tt d.gif] A gif or jpeg version of the figure.  This is ignored
%      in the postscript output.  After the file is processed, you must
%      make sure that the figure is in the appropriate place.  (This is
%      because what is created is a reference to the figure rather than
%      an entire figure.)  So if the argument here is |screen.gif|, you
%      must make sure that the file |screen.gif| is in the same
%      directory as the output html pages.
%    \item[\tt e.html] A URL to link the image with.  If it's blank, no
%      hyperlink will be created on the image.
%    \end{description}
%
%    \DescribeMacro{\figpath}You can indicate the location of the
%    figure files with the |\figpath| macro in the preamble.  This
%    works for both \latex\ and \hlx .  
%    
%    The \latex\ |\figureplace| macro checks to see if the page is even
%    or odd, and shifts the figure to one side or the other depending.
%    This is done by checking the |\pageref| for the figure
%    cross-reference tag.  The problem with this is that the first time
%    through, the tag is undefined and |\pageref| returns a |??|
%    instead of a number, causing all sorts of havoc.  So, the
%    |\@ifundefined| business in the following macro is there to check
%    if the reference is defined before using it to check whether the
%    page is odd or even.  This is a bit of a hack into \latex\ 
%    internals, but I can see no clear way around it.
%
%    The optional argument to |\figureplace| is the optional argument
%    to the |\caption| command.
%
%    \begin{macrocode}
%<*cls>
\newcommand{\figpath}[1]{\psfigurepath{#1}} \newlength{\figadjust}
\newcommand{\figureplace}[7][\relax]{
\begin{figure}[#3]
  \setbox0=\hbox{\psfig{figure=#5}}
  \ifnum\wd0<\linewidth
    \centerline{\unhbox0}
  \else
  \@ifundefined{r@#4}
    \relax
    {\ifodd\pageref{#4}
        \begin{flushleft}\unhbox0\end{flushleft}
     \else
        \setlength{\figadjust}{-\wd0}
        \addtolength{\figadjust}{\linewidth}
        \hskip\figadjust\unhbox0
     \fi}
  \fi
  \ifx #1\relax\caption{#2}\else\caption[#1]{#2}\fi
  \label{#4}
\end{figure}}
%</cls>
%    \end{macrocode}
%    \end{macro}
%
%
% \subsubsection{\hlx\ Version}
%
%    \DescribeMacro{\figuremove} The |\figuremove| macro moves the
%    html-ready figures from the source directory (specified with
%    the |\figpath| macro \DescribeMacro{\figpath} to the result
%    directory (specified with the |\htmldirectory| macro.
%
%    \begin{macrocode}
%<*hlx>
\HlxEval{ 
(put 'figpath        'hyperlatex 'hyperlatex-ts-set-figurepath)
(put 'figuremove     'hyperlatex 'hyperlatex-ts-figuremove)

(defvar hyperlatex-ts-figurepath)

(defun hyperlatex-ts-set-figurepath ()
  (setq hyperlatex-ts-figurepath (hyperlatex-parse-required-argument))) 

(defun hyperlatex-ts-figuremove ()
  (if hyperlatex-final-pass 
    (let ((file (hyperlatex-parse-required-argument)))
      (let ((infile  (concat hyperlatex-ts-figurepath "/" file))
            (outfile (concat hyperlatex-html-directory "/" file)))
        (message "Copying %s to %s" infile outfile)
        (copy-file infile outfile t)))))
}
%\iffalse
%TBD: You can use the |figborder| counter to control the size of the
%    image borders.  The default value is no border.\index{figborder}
%    We do it this way because the navigation panel icons don't
%    want borders, so the border attribute of the IMG tag has to be
%    switched on and off.
%
%\newcounter{figborder}
%\setcounter{figborder}{0}
%\newcommand{\figchangeborder}[1]{\htmlattributes{IMG}{BORDER=#1}}
%\fi
\newcommand{\figureplace}[7][\relax]{
\begin{figure}[#3]
  \label{#4}
  \begin{center}\xmlattributes{img}{border="0"}
    \EmptyP{#7}{\xlink{\htmlimage{#6}}{#7}}{\htmlimage{#6}}
    \caption{#2}
  \end{center}
\end{figure}
\figuremove{#6}}
%</hlx>
%    \end{macrocode}
%
% \section{Boxed Stuff}
%
% \subsection{The Basic}
%
%    \begin{macro}{\emphbox}
%    The |\emphbox| macro creates a box of |#2| size rules, the width
%    of the column or page. The text is set inside the box, at |#1|
%    distance from the sides of the box.  The text for the box is in
%    |#3|.  You should rarely, if ever, use this macro directly.
%    Rather you should use the |\note| and |\proto| macros, and their
%    kin. 
%
%    \begin{macrocode}
%<*cls>
\newlength{\emphBoxWidth}
\newlength{\emphBoxHeight}
\newlength{\emphBoxRef}

\newlength{\rulewidth}
\newlength{\ruledist}
\newcommand{\emphbox}[3][7pt] {
\bgroup\small
\setlength{\rulewidth}{#2}
\setlength{\ruledist}{#1}
\def\text{#3}

\setlength{\emphBoxWidth}{\linewidth}
\setbox2\hbox{\rule{\emphBoxWidth}{\rulewidth}}
\setbox1\hbox{\rule{\emphBoxWidth}{\rulewidth}}

\addtolength{\emphBoxWidth}{-2.0\ruledist}
\addtolength{\emphBoxWidth}{-2.0\rulewidth}
\setbox0\hbox{\begin{minipage}[b]{\emphBoxWidth}
\raggedright\strut\text\strut\end{minipage}}

\setlength{\emphBoxHeight}{\ht0}
\addtolength{\emphBoxHeight}{2.0\rulewidth}
\addtolength{\emphBoxHeight}{2.0\ruledist}
\setlength{\emphBoxRef}{-\ruledist}
\addtolength{\emphBoxRef}{-\rulewidth}
\addtolength{\emphBoxRef}{-\fboxsep}
\setbox3\hbox{\hbox to
    0pt{\hss\rule[\emphBoxRef]{\rulewidth}{\emphBoxHeight}}} 
\setbox4\hbox{\hbox to
    0pt{\rule[\emphBoxRef]{\rulewidth}{\emphBoxHeight}\hss}} 
\par\noindent
\vbox to \ht3{
\hbox{\unhbox1}
\penalty10000\vskip-\ht2
\hbox to
    \wd2{\hskip\rulewidth\unhbox3\hss\unhbox0\hss\unhbox4\hskip\rulewidth} 
\penalty10000\vskip-\ht2
\hbox{\unhbox2}
}
\vskip\ruledist\vskip\rulewidth\vskip1.0ex
\egroup}
%</cls>
%    \end{macrocode}
%    \end{macro}
%
%  \subsubsection{\hlx\ Version}
%
%    Rather than use html tables, we just indent the text with
%    |blockquote|.  The |\note| macro uses tables to get the right
%    indentation, but that wouldn't really work for |\proto|.
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\emphbox}[3]{
  \html{blockquote}#3\html{/blockquote}}
%</hlx>
%    \end{macrocode}
%
%
% \subsection{Function Descriptions}
%
%    \begin{macro}{\proto}
%    Use this to set off function prototypes.  The style should be to 
%    use this function, then a `description' list for the arguments,
%    and then text to explain. 
%
%    If you enclose each function argument in its own |\hbox|, this is
%    an ok way to avoid inconvenient line breaking.  This is what is
%    done in |proto.sty|.
%
%    \begin{macrocode}
%<*cls>
\newcommand{\proto}[1]{\emphbox{2pt}{\hangindent=5ex\hangafter=1#1}}
%</cls>
%    \end{macrocode}
%    \end{macro}
%
% \subsubsection{\hlx\ Version}
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\proto}[1]{
  \html{blockquote}#1\html{/blockquote}}
%</hlx>
%    \end{macrocode}
%
%
% \subsection{Notes and Cautions}
%
%    \begin{macro}{\note}
%    Use this macro to set aside special notes to the reader.  To
%    assert a little stylistic note, the optional argument to this
%    macro probably should always be one of: ``note'', ``caution'', or
%    ``warning''. 
%
%    \begin{macrocode}
%<*cls>
\newcommand{\note}[2][NOTE]{
  \vspace{1.0ex}
  \setbox5\hbox{\strut\sffamily\bfseries\MakeUppercase{#1}:\ }
  \emphbox{2pt}{\hangindent=\wd5\hangafter=1\unhbox5\normalsize#2}}
%</cls>
%    \end{macrocode}
%    \end{macro}
%    \begin{macro}{\notebreak}
%
%    Rarely, you may want more than one paragraph in a |\note|.  The
%    usual paragraph-breaking commands don't work properly in this
%    context, so simply use |\notebreak| to separate paragraphs.  Be
%    careful that a |\emphbox| is not allowed to span pages, it will not
%    do so gracefully.
%
%    \begin{macrocode}
%<*cls>
\newcommand{\notebreak}{\hfil\vadjust{\vskip\medskipamount}\break\indent}
%</cls>
%    \end{macrocode}
%    \end{macro}
%
% \subsubsection{\hlx\ Version}
%
%    The \hlx\ version of the note uses a paragraph class.  Note that this
%    must be reflected in the style sheet.
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\note}[2][NOTE]{
  \xml{p class="note"}\textbf{#1: }#2\xml{/p}}
\newcommand{\notebreak}{\html{BR}\html{BR}}
%</hlx>
%    \end{macrocode}
%
% \subsection{Parboxes}
%
%    Here's a \hlx\ version of |\parbox|\DescribeMacro{\parbox}.
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\parbox}[3][t]{#3}
%</hlx>
%    \end{macrocode}
%
% \section{Index}
%
% \subsection{Indexing Macros}
%
%    \DescribeMacro{\ind} The |\ind| command puts an index token in the 
%    line and a margin note, and prints the argument where it lies. It
%    is meant to save the retyping, as in:
%    \begin{verbatim}
%    complicated concept\index{complicated concept}
%    \end{verbatim}
%    TBD: It is also designed to allow permuting of index entries, but that
%    is not yet implemented. When implemented, the optional argument to
%    |\ind| will be used to control the index token type, and to
%    indicate the concept should be
%    permuted. \DescribeMacro{\indn}Until it is, use |\indn|, which is
%    the same thing without the permuter argument. 
%    \DescribeMacro{\indc} The |\indc| command does not print the
%    argument in the line. 
%
%    When in draft mode, these macros print the index entry in the
%    margin in a |\marginpar|.
%
%    \begin{macrocode}
%<*cls>
  \newcommand{\ind}[2][0]{#2\index{#2}
    \draftmarginpar{\ensuremath{\cal\ I}}{#2}}
  \newcommand{\indn}[1]{#1\index{#1}
    \draftmarginpar{\ensuremath{\cal\ I}}{#1}}
  \newcommand{\indc}[1]{\index{#1}
    \draftmarginpar{\ensuremath{\cal\ I}}{#1}}
%</cls>
%    \end{macrocode}
%
%
%
% \subsubsection{\hlx\ Version}
%
%    The marginalia are no use in \hlx , since the document has
%    presumably already been debugged and indexed before conversion to
%    html.  In other words, use the paper for proofreading.
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\ind}[2][0]{#2\index{#2}}
\newcommand{\indn}[1]{#1\index{#1}}
\newcommand{\indc}[1]{\index{#1}}
\newcommand{\printindex}{\chapter*{\indexname}
  \htmlprintindex}
%</hlx>
%    \end{macrocode}
%
% \subsection{Index Style}
%    
%    The index style is described below.  The |headings_flag|
%    indicates that we want letter headings above each section, and the
%    prefix and suffix arrange that we get a |\Huge| bold sanserif
%    letter in that place.
%
%    \begin{macrocode}
%<*ist>
heading_prefix "{\\Huge\\bfseries\\sffamily\\hskip-2pt "
heading_suffix "}\\nopagebreak\\vskip 3pt\\hrule height2pt
                 \\nopagebreak\\vskip 4pt"
headings_flag 1
%</ist>
%    \end{macrocode}
%
%
% \section{Copyright Matter}
%
%   \DescribeMacro{\copyrightmatter} The |\copyrightmatter| macro
%   contains a bunch of stuff relating to the copyright notice on the
%   second page of the books.  
%
%    \begin{macrocode}
%<*cls>
\newcommand\copyrightmatter{{\scriptsize
Copyright \copyright\ 2005 OPeNDAP, Inc.
\begin{quote}
  Permission is granted to copy, distribute and/or modify this
  document under the terms of the GNU Free Documentation License,
  Version 1.2 or any later version published by the Free Software
  Foundation; with no Invariant Sections, no Front-Cover Texts, and no
  Back-Cover Texts. A copy of the license is included in the section
  entitled "GNU Free Documentation License".
\end{quote}}}
%</cls>
%    \end{macrocode}
%
%    The \hlx\ version should just point to a copyright notice.  For
%    now, we skip it.
%
%    \begin{macrocode}
%<*hlx>
\newcommand\copyrightmatter{}
%</hlx>
%    \end{macrocode}
%
%
% \section{CVS Information}
%
%    Here are a bunch of RCS-ID-parsing macros, pinched from the
%    rcsinfo.sty package, written by Dr. Juergen Vollmer,
%    Viktoriastrasse 15, D-76133 Karlsruhe, Germany (email:
%    Juergen.Vollmer@acm.org).  I have included these here instead of
%    simply including the package because the package is both more and
%    less than what we need.  More: it includes footer formatting that
%    interferes with the format of the dods-book2 pages.  Less: it does
%    not support Hyperlatex.
%
%    \begin{macro}{\rcsInfo}
%    Use this package like this:
%
%    \begin{verbatim}
%    \rcsInfo $id: dods-book2.dtx,v 1.5 1999/08/30 14:05:43 tom Exp $
%    \end{verbatim}
%    \end{macro}
%
%    The |\rcsInfo| macro defines several other macros, from pieces of
%    the CVS ID string.  After the above macro has been invoked, you
%    can use any of these to format version numbers, draft footers,
%    and whatever.
%
%    \begin{description}
%    \item[{\tt \bck rcsInfoFile}]\DescribeMacro{\rcsInfoFile} The
%      source file mentioned in the RCS string.  |dods-book2.dtx| in
%      the example above. 
%    \item[{\tt \bck rcsInfoDate}]\DescribeMacro{\rcsInfoDate} The
%      date string from the RCS ID string. |1999/08/30| in the
%      example. 
%    \item[{\tt \bck rcsInfoTime}]\DescribeMacro{\rcsInfoTime} The
%      time string from the RCS ID string.  |14:05:43| in the
%      example. 
%    \item[{\tt \bck rcsInfoRevision}]\DescribeMacro{\rcsInfoRevision}
%      The revision number from the RCS ID string.  |1.5| in the
%      example. 
%    \item[{\tt \bck rcsInfoOwner}]\DescribeMacro{\rcsInfoOwner} The
%      owner mentioned in the RCS string. |tom| in the example. 
%    \item[{\tt \bck rcsInfoStatus}]\DescribeMacro{\rcsInfoStatus} The
%      file status from the RCS string.  |Exp| in the example.
%    \item[{\tt \bck rcsInfoLocker}]\DescribeMacro{\rcsInfoLocker} If
%      any, the identity of the locker from the RCS ID string.  Not
%      present in the example.
%    \end{description}
%
%    The code follows.  Again, this has been pinched nearly verbatim
%    from the |rcsinfo.sty| package.
%
%    \begin{macrocode}
%<*cls>
\newif\if@rcsInfoColonIsActive@ \def\rcsInfo { \ifnum\catcode`\:=13
  \@rcsInfoColonIsActive@true \catcode`:=12 \else
  \@rcsInfoColonIsActive@false \fi \@rcsInfoReadArgs }

\def\@rcsInfoReadArgs $Id#1 {
  \@rcsInfoDefaults
  \if $#1 \let \@rcsInfoNext = \@rcsInfoEat
  \else   \let \@rcsInfoNext = \@rcsInfoEatColon
  \fi
  \if@rcsInfoColonIsActive@
     \catcode`:=13
  \fi
  \@rcsInfoNext $Id#1
}

\def\@rcsInfoEat #1 {}

\def\@rcsInfoEatColon  $Id:#1 {
  \if $#1 \let \@rcsInfoNext = \@rcsInfoEat
  \else   \let \@rcsInfoNext = \@rcsInfoCrackAndEat
  \fi
  \@rcsInfoNext #1
}
\def\@rcsInfoCrackAndEat #1 #2 #3 #4 #5 #6 {
  \@rcsInfoCrackString #1 #2 #3 #4 #5 #6
  \@rcsInfoNext
}

\def\@rcsInfoCrackString #1 #2 #3 #4 #5 #6 {
  \def\rcsInfoFile{#1}
  \def\rcsInfoRevision{#2}
  \def\rcsInfoDate{#3}
  \def\rcsInfoTime{#4}
  \def\rcsInfoOwner{#5}
  \def\rcsInfoStatus{exp}
  \if $#6
    \def\rcsInfoLocker{--not-locked--}
    \let \@rcsInfoNext = \relax
  \else
    \def\rcsInfoLocker{#6}
    \let \@rcsInfoNext = \@rcsInfoEat
  \fi
}

% Hacked for subversion jhrg 9/22/05
%
% \def\@rcsInfoCrackAndEat #1,v #2 #3 #4 #5 #6 #7 {
%   \@rcsInfoCrackString #1,v #2 #3 #4 #5 #6 #7
%   \@rcsInfoNext
% }

% \def\@rcsInfoCrackString #1,v #2 #3 #4 #5 #6 #7 {
%   \def\rcsInfoFile{#1}
%   \def\rcsInfoRevision{#2}
%   \def\rcsInfoDate{#3}
%   \def\rcsInfoTime{#4}
%   \def\rcsInfoOwner{#5}
%   \def\rcsInfoStatus{#6}
%   \if $#7
%     \def\rcsInfoLocker{--not-locked--}
%     \let \@rcsInfoNext = \relax
%   \else
%     \def\rcsInfoLocker{#7}
%     \let \@rcsInfoNext = \@rcsInfoEat
%   \fi
% }

\def\@rcsInfoDefaults {
  \def\rcsInfoFile{--sourcefile--}
  \def\rcsInfoDate{--date--}
  \def\rcsInfoTime{--time--}
  \def\rcsInfoRevision{--revision--}
  \def\rcsInfoOwner{--owner--}
  \def\rcsInfoStatus{--status--}
  \def\rcsInfoLocker{--locker--}
}
%</cls>
%    \end{macrocode}
%
%    \subsection{\hlx\ Version}
%
%    The following is a hyperlatex implementation of the same macros
%    above.  They are to be used in precisely the same manner.
%
%    \begin{macrocode}
%<*hlx>
\HlxEval{

(put 'rcsInfo        'hyperlatex 'hyperlatex-ts-rcsinfo)
(put 'rcsInfoFile    'hyperlatex 'hyperlatex-ts-rcsinfo-file)
(put 'rcsInfoDate    'hyperlatex 'hyperlatex-ts-rcsinfo-date)
(put 'rcsInfoTime    'hyperlatex 'hyperlatex-ts-rcsinfo-time)
(put 'rcsInfoRevision 'hyperlatex 'hyperlatex-ts-rcsinfo-vsn)
(put 'rcsInfoOwner   'hyperlatex 'hyperlatex-ts-rcsinfo-own)
(put 'rcsInfoStatus  'hyperlatex 'hyperlatex-ts-rcsinfo-status)
(put 'rcsInfoLocker  'hyperlatex 'hyperlatex-ts-rcsinfo-lock)

(defvar hyperlatex-ts-rcs-file "--sourcefile--")
(defvar hyperlatex-ts-rcs-date "--date--")
(defvar hyperlatex-ts-rcs-time "--time--")
(defvar hyperlatex-ts-rcs-vsn "--revision--")
(defvar hyperlatex-ts-rcs-own "--owner--")
(defvar hyperlatex-ts-rcs-status "--status--")
(defvar hyperlatex-ts-rcs-lock "--not-locked--")

(defun hyperlatex-ts-rcsinfo-file ()
  (insert hyperlatex-ts-rcs-file))

(defun hyperlatex-ts-rcsinfo-date ()
  (insert hyperlatex-ts-rcs-date))

(defun hyperlatex-ts-rcsinfo-time ()
  (insert hyperlatex-ts-rcs-time))

(defun hyperlatex-ts-rcsinfo-vsn ()
  (insert hyperlatex-ts-rcs-vsn))

(defun hyperlatex-ts-rcsinfo-own ()
  (insert hyperlatex-ts-rcs-own))

(defun hyperlatex-ts-rcsinfo-status ()
  (insert hyperlatex-ts-rcs-status))

(defun hyperlatex-ts-rcsinfo-lock ()
  (insert hyperlatex-ts-rcs-lock))

(defun hyperlatex-ts-rcsinfo ()
  "Parses an RCS ID string into several pieces.  The ID string is
   surrounded by two dollar signs, and begins with Id.  It may have
   six, seven, or no fields."
  (let ((start-id (search-forward "$Id"))
        (end-id   (save-excursion (search-forward "$"))))
    (if (> end-id (+ start-id 10))
        (progn
          (search-forward " " end-id)
          (setq hyperlatex-ts-rcs-file 
                (buffer-substring (point) 
                                  (- (search-forward ",v " end-id)
                                     3)))
          (setq hyperlatex-ts-rcs-vsn
                (buffer-substring (point)
                                  (1- (search-forward " " end-id))))
          (setq hyperlatex-ts-rcs-date
                (buffer-substring (point)
                                  (1- (search-forward " " end-id))))
          (setq hyperlatex-ts-rcs-time
                (buffer-substring (point)
                                  (1- (search-forward " " end-id))))
          (setq hyperlatex-ts-rcs-own
                (buffer-substring (point)
                                  (1- (search-forward " " end-id))))
          (setq hyperlatex-ts-rcs-status
                (buffer-substring (point)
                                  (1- (search-forward " " end-id))))
          (if (< (point) (1- end-id))
              (setq hyperlatex-ts-rcs-lock
                    (buffer-substring (point)
                                      (- (search-forward "$" end-id) 2)))
            (search-forward "$" end-id)) ))))
}
%</hlx>
%    \end{macrocode}
%
%    The last search was added to eat the remaining dollar sign.
%    Without this, \hlx\ interprets the dollar sign, goes into math
%    mode, and stays there. 
%
%
% \section{Miscellaneous Convenience Commands}
%
%    The following are miscellaneous convenience commands with no
%    better place to be listed.
%
%    \begin{macrocode}
%<*cls>
\newcommand{\clearemptydoublepage}
   {\newpage{\pagestyle{empty}\cleardoublepage}}
\newcommand{\degree}{$^\circ$}
\newcommand{\circflex}{$^\wedge$}
\newcommand{\showtime}{\the\time}
%</cls>
%    \end{macrocode}
%
% \subsection{\hlx\ Convenience Commands}
%
%    These commands appear to help various parts of the documents
%    adjust. 
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\clearemptydoublepage}{}
\newcommand{\pagenumbering}[1]{}
\newcommand{\psfigurepath}[1]{}
\newcommand{\degree}{\htmlsym{##176}}
\newcommand{\circflex}{\htmlsym{##94}}
\newcommand{\backslash}{\htmlsym{##92}}
\newcommand{\|}{\htmlsym{##124}}
\newcommand{\left}[1]{}
\newcommand{\right}[1]{}
\newcommand{\strut}{}
\newcommand{\vdots}{.}
\newcommand{\ddots}{.}
\newcommand{\cdots}{.}
\newcommand{\goodbreak}{}
\newcommand{\hbox}[1]{#1}
\newcommand{\smallbreak}{}
\newcommand{\medbreak}{}
\newcommand{\bigbreak}{}
\newcommand{\penalty}[1]{}
%</hlx>
%    \end{macrocode}
%    
%    There is a problem with using \hlx\ and docstrip, and that's the
%    |\endinput| that goes at the end of the file...
%
%    \begin{macrocode}
%<*hlx>
\newcommand{\endinput}{}
%</hlx>
%    \end{macrocode}




% \Finale \PrintIndex
