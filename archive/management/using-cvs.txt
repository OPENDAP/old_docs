
 $Id$

Contents

I. Getting started
Ib. Adding and using a branch
II. Useful commands
III. Version management
IV. Successive merging from a branch
--------------------------------------

I. Getting started

To start the ball rolling look in the cvs server documentation file. What it
describes is the `cvs login' tool (which you don't get help on if you say cvs
--help ...); in the info file look in the section on repositories:remote
repositories:password authentication:using the client.

Here is a summary of what to do: 

	cvs -d :pserver:<user>@dcz.dods.org:/usr/local/cvs-repository login

** Make sure not to add a trailing / to the repository name; some versions of
   CVS gag if you do.

It should mumble about a password; ask aboutfor your password. Once that's
done you don't have to type the password anymore.

	cvs -d :pserver:<user>@dcz.dods.org:/usr/local/cvs-repository \
	  checkout -l DODS

This will checkout the root directory without recurring through all the
subdirs; you will have to select the subdirs you want by hand. Unfortunately,
there is no way to tell it to checkout everything except <foo>. Also, `co' is
an alias for `checkout'.

Once you have checked out the root directory you no longer need to feed cvs
the `-d <big long string>' thing; it remembers where to go.

As an alternative, you can define the environment variable CVSROOT to have
the vlaue :pserver:<user>@dcz.dods.org:/usr/local/cvs-repository. Then you
won't have to use the -d option. 

Find a place to put the dods root directory and do the following:

	cvs co DODS/etc

	cvs co DODS/src/dap
	cvs co DODS/src/nc-dods

to get only the source directories for the dap library and Netcdf server, or

	cvs co DODS/src

to get all the source directories.

The `-l' option in the first command tells cvs *not* to recurse when checking
out the root directory. If you say `cvs co DODS' that will result in a huge
pile of stuff you probably could care less about.

Because it is not possible to get cvs to create the subdirs of DODS without
checking out the subdirs contents (which would amount to the entire DODS
module - it is very large) it is hard to know which subdirs you might want.
Here is a list of the subdirs under DODS:

	src	The source code.
	etc	Destination for servers and also some support scripts.
	bin	You must make this by hand.
	lib	You must make this by hand.
	include	The include files installed by src/dap.

As with all software, there are dependencies that exist between these
directories. If you get the `src' directory, you will also need etc and
include before you can build any of the software. In addition, you must make
the bin and lib directories. If you get the `doc' directory, that's all you
need.

The `cvs status' command is very useful to see what is going on; use the -v
option to see information about various tags and -l to limit `cvs status' to
the local directory (the default is to recurse).

Also, the `cvs log' command is useful when you want to see the log messages
for all the revisions, including revisions on branches you have not checked
out.

--------------------------------------

Ib. Checking code in on a new branch

If you have checked out code a want to check changes in on a new branch
instead of the main trunk, do the following:

1) Tag the code so that the branch has a name.
2) Update your copy of the code so that it is associated with that branch.
3) Check in the code.

Here's an example:

	cvs tag -b test-branch

-b makes this tag a branch off of the main trunk. The symbolic name
 `test-branch' can be used to refer to the branch. Without a symbolic name,
 you'll be hosed.

	cvs update -r test-branch

This updates the tag of the code in the current working directory to
`test-branch'. Since the tag is on a branch, now so is this code.

	cvs ci -m <some message>

The code is now checked in on the branch.

Note that there's a test CVS module that can be checked out and played with.
You cannot do anything too terrible to this since the `code' is just a couple
of test files. Before doing anything that might cause the DODS repository to
get hosed, try it out there. The name of the test module is `cvs-test'.

--------------------------------------

II. Useful commands

- Here are some (Bourne) shell macros I find useful:

cvss: Show the status of any file that is not up to date in CVS. This is
useful when you want to know which files have been changed.

cvsl: This does the same thing as cvss, but for the current directory only.

cvsu: Show which files in the CWD are not in cvs. This is useful when you're
adding files and you want to make sure that something has not been left out.

cvsm: Get the filename only of every file in the CWD that's changed since the
last check in. You can use this with an editor to great advantage. 

     emacs `cvsm` 

Opens all the changed files. You can then use Emacs' CVS tools to look at the
diffs, etc.

cvsc: Which files in the CWD had conflicts on during the last merge
operation? Note that this macro is also set up for use with an editor.

Here they are:

alias cvss='cvs status 2>&1 | grep "'"^File\|Examining"'" | grep -v Up-to-date'
alias cvsl='cvs status -l 2>&1 | grep "'"^File\|Examining"'" | grep -v Up-to-date'
alias cvsu='cvs status -l 2>&1 | grep Unknown'
alias cvsm='cvsl | cut -f 2 -d " "'
alias cvsc='cvsl | grep conflicts | cut -f 2 -d " "'


- Looking at logs (the stuff you write into cvs commit):

	cvs log -N -l -d ">1999-05-19" | more

Lists all the logs changed on or after 5/19/1999 (use > for only after). -l
suppresses recursive behavior and -N suppresses listing the symbolic tag
names (which can be a long list for each file). When you're making a source
release this can be an easy way to update the ChangeLog file.

- Adding files:

	cvs add <file>|<pattern>

Adds the file or files. You must run cvs commit to actually add them to the
repository.

- Binary file:

	cvs add -ko <file>|<pattern>

The `-ko' flag suppresses keyword expansion; in case binary files (data
files, GIF images, ...) contain a sequence of bytes that just happens to be
$Id$ or any of the other keywords recognized by cvs, using the -ko flag will
keep those bytes from being changed! If you already added a binary file you
can use the `cvs admin' command to turn of keyword expansion:

	cvs admin -ko <file>|<pattern>

- Checking out everything before a certain date:

	cvs checkout -D 1999-03-25 DODS/src/nc-dods

checks out all the sources in DODS/src/nc-dods as they were *on or before*
25 March 1999.

- Checking out tagged sources. See the CVS manual or info pages about tags. I
  use tags for *all* the releases, so you need to look at this:

	cvs checkout -r release-2-10 DODS/src/nc-dods

checks out all the sources tagged `release-2-10'. Note that CVS does not
allow dots (.) in tag names. Note that if the tag is a branch point you now
have a branch of the source tree to work in. Changes you make will be checked
in on the branch, not the trunk (that's good). To move the changes over to
the trunk, use the merge command. Read about that in the manual.

- The checkout command does a complete checkout of a module or part of a
  module. If you want new sources inside an existing project tree, use
  `update'. If the directory does not exist, use `update -d'. In fact, it is
  best to use update -d always unless you *know* that no new directories have
  been added. Here's examples of the two above operations using update
  instead of checkout:

	cvs update -d -D 1999-03-25 nc-dods

	cvs update -d -r release-2-10 nc-dods

From within DODS/src/ will get the nc-dods sources from on or before 25 march
1999 or tagged `release-2-10'. The difference is that these commands are run
from within an existing tree; the checkout is run above the tree.

- Using the -l option. The -l option suppresses the recursive behavior of
  cvs.

- Tagging directories:

	cvs tag -b release-2-10

tags all of the source files in the current directory and all subdirectories
as `release-2-10' and makes that tag a branch point in the source tree. Use
-l to tag only files in the current directory.

- Looking at information about the revisions of a source file:

	cvs status -v ChangeLog

Here's the output for that file:

    [dcz:/usr/local/ferret-DODS/src/nc-dods-2.19.2] cvs status -v ChangeLog
    ===================================================================
    File: ChangeLog         Status: Up-to-date

       Working revision:    1.3.4.2 Wed Apr 14 03:33:45 1999
       Repository revision: 1.3.4.2 /usr/local/cvs-repository/DODS/src/nc-dods/ChangeLog,v
       Sticky Tag:          ferret (branch: 1.3.4)
       Sticky Date:         (none)
       Sticky Options:      (none)

       Existing Tags:
	    ferret                          (branch: 1.3.4)
	    release-2-18                    (branch: 1.3.2)
	    no-gnu                          (branch: 1.2.4)
	    release-2-17                    (branch: 1.2.2)

You can see that there are four tagged revisions (the tags are ferret,
release-2-18, no-gnu and release-2-17). The `Sticky Tag' indicates that I'm
using the revision tagged `ferret'. Note that it is a tag on a branch and
that I've made some changes. Here's the `status' of the same file in the
development directory (i.e., on the trunk):

    [dcz:/usr/local/DODS/src/nc-dods] cvs status -v ChangeLog
    ===================================================================
    File: ChangeLog         Status: Up-to-date

       Working revision:    1.3     Thu Jan 21 22:56:55 1999
       Repository revision: 1.3     /usr/local/cvs-repository/DODS/src/nc-dods/ChangeLog,v
       Sticky Tag:          (none)
       Sticky Date:         (none)
       Sticky Options:      (none)

       Existing Tags:
	    ferret                          (branch: 1.3.4)
	    release-2-18                    (branch: 1.3.2)
	    no-gnu                          (branch: 1.2.4)
	    release-2-17                    (branch: 1.2.2)


Note that the same tags are listed but that the Stick Tag is none and the
revision number of the working file is 1.3, not 1.3.4.2 as in the previous
example.

Aside: Don't confuse CVS' revision numbers with our version numbers.

III. Version management

DODS C++ software development will be done as follows:

   a) All development of new features will be done on the trunk.
   b) All releases intended for users will be tagged branch points with a
      name such as `release-<major num>-<minor num>'.
   c) DODS will use the <major num>.<minor num>.<fix num> format for
      releases.

      i) Major Num indicates features that effect compatibility. A change in
	 this number means that features have been introduced which will will
	 make new servers incompatible with old clients, etc. For example, a
	 version 2 client won't necessarily be able to talk to a version 3
	 server (although specific instances might work).
      ii) Minor Num indicates features that don't affect compatibility, at
	 least not in a drastic way. There might be some glitches, but
	 nothing Earth shattering.
      iii) Fix Num indicates bug fixes.

   d) The version.h and ChangeLog files give version numbers and changes
      associated with each revision.
   e) Fixes will be made on branches and then merged back into the trunk.

Here are the steps to take when we want to start working on a release (using
the release number 3.1 as an example):

0) Merge the previous release branch into the trunk.

0.5) 'cvs tag root-of-release-3-1'
   Before making the branch, tag the code on the trunk. That will enable
   you to later on get baqck the code just before the branch point.

1) 'cvs tag -b release-3-1'
   Mark the head of the trunk as a branch point.  (The '-branch' is a
   bit confusing but something is needed because 'release-3-1' is used
   below.)

2) 'cvs co -r release-3-1'
   Developers, testers, etc check out the code, compile, test, debug.

3) 'cvs ci <filename(s)>'
   Check in all changes.

4) 'cvs update ...'
   Update code to get all changes checked in.  Compile, test, debug.

5) repeat steps 3) and 4) as necessary
   If desired, additional tags can be made to mark various test
   releases.  (E.g., 'cvs tag release-3-1-alpha1'  [or '-alpha2',
   '-beta1', '-beta2', etc])

   We probably don't really need these tags (we can just work
   on the head of the branch).  However, in terms of user support, I
   think it would be helpful to tag any version that is available to
   users, so we can return to that point if needed.  So maybe we don't
   tag the alpha releases but we do tag the beta releases.
   (See Note below)

6) 'cvs tag release-3-1-0'
   Release deadline is here (or we have achieved a perfect release).

7) 'cvs tag release-3-1-x'
   Bug fixes have been made, get out to users.


	     	   --------------------------------
	     	  /       ^   	      ^	          ^
       	       	 /        3-1-alpha   3-1-0	  3-1-1
	     	/
     3-1       /
       \      /
       	\--> /
   -------------------------------------------------------
                  Trunk -->

Figure: The CVS trunk and several tags. The tags in the figure 
don't include the word `release' because that made it too
crowded. The 3-1-branch tag defines the code that forms the 
basis for a release, 3-1-alpha is the code mid-way through steps
3 & 4 above. the tag 3-1 is the first code sent to users, 3-1-1 is
first set of fixes for that code.

IV. Merging many times from a single branch back to the trunk.

Suppose you create a branch and make several releases from it. All the
while, other developers are adding changes to the trunk and changes/fixes to
t he released code. As each successive release is made, the changes associated
with that release should be merged back into the trunk software. However, if
the entire branch is merged back onto the trunk some changes/fixes will be
lost --- they will be un-done. Here's how to work around that. 

First, tag every release point. Second only merge revisions with tags --- this
will keep things reasonably sane. Referring to the figure above, once the
3-1-alpha tag is created (but before any further work is done) the software
could be diagramed as:


	     	   --------
	     	  /       ^
       	       	 /        3-1-alpha
	     	/
     3-1       /
       \      /
       	\--> /
   -------------------------------------------------------
                  Trunk -->

The command to merge the `3-1-alpha changes' back onto the trunk is:

	cvs update -j 3-1

This command is run in a directory that contains the trunk software.

After a while more changes are made and the 3-1-0 tag is created. A diagram
of the software now looks like:


	     	   --------------------
	     	  /       ^   	      ^
       	       	 /        3-1-alpha   3-1-0
	     	/
     3-1       /
       \      /
       	\--> /
   -------------------------------------------------------
                  Trunk -->

To merge the changes made between the 3-1-alpha and 3-1-0 tags, use:

	cvs update -j 3-1-alpha -j 3-1

this command merges the changes between the two tags without un-doing the
changes between the start of the branch and the tag 3-1-alpha (which have
already been merged). Note that the 3-1-0 tag is not used in this command. It
is, however, a good idea to make it before doing the merge to make sure that
the tag is created since subsequent merges will depend on it.
